<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE javaClass PUBLIC "-//IBM//DTD DITA Java API Class Reference Type//EN"
 "../dtd/javaClass.dtd">
<javaClass id="javaTopicNode">
<apiName>TopicNode</apiName>
<shortdesc>This class represents the position of a topic within a collection.</shortdesc>
<javaClassDetail>
<javaClassDef>
<javaBaseClass keyref="java.io.Object">Object</javaBaseClass>
<javaImplementedInterface href="javaInterface1.dita"></javaImplementedInterface>
</javaClassDef>
<apiDesc>The TopicNode class provides methods to traverse the collection that
contains the topic.</apiDesc>
</javaClassDetail>
<javaMethod id="TopicNodeConstructor">
<apiName>TopicNode</apiName>
<shortdesc>This constructor creates a topic node within a collection.</shortdesc>
<javaMethodDetail>
<javaConstructorDef>
<javaMethodAccess value="public"/>
<javaParam>
<javaMethodClass keyref="java.util.Collection">Collection</javaMethodClass>
<apiItemName>collection</apiItemName>
<apiDefNote>The collection that should contain the constructed node.</apiDefNote>
</javaParam>
<javaParam>
<javaMethodClass keyref="com.ibm.Topic">Topic</javaMethodClass>
<apiItemName>topic</apiItemName>
<apiDefNote>The topic for the constructed node.</apiDefNote>
</javaParam>
</javaConstructorDef>
</javaMethodDetail>
</javaMethod>
<javaField id="read">
<apiName>READ_OPERATION</apiName>
<shortdesc>This constant should be passed to determine if the node can be
read.</shortdesc>
<javaFieldDetail>
<javaFieldDef>
<javaFieldAccess value="public"/>
<javaFieldPrimitive value="int"/>
<apiData>1</apiData>
</javaFieldDef>
</javaFieldDetail>
</javaField>
<javaField id="write">
<apiName>WRITE_OPERATION</apiName>
<shortdesc>This constant should be passed to determine if the node can be
updated.</shortdesc>
<javaFieldDetail>
<javaFieldDef>
<javaFieldAccess value="public"/>
<javaFieldPrimitive value="int"/>
<apiData>-1</apiData>
</javaFieldDef>
</javaFieldDetail>
</javaField>
<javaField id="locator">
<apiName>Locator</apiName>
<shortdesc>This field identifies the location of the topic.</shortdesc>
<javaFieldDetail>
<javaFieldDef>
<javaFieldAccess value="protected"/>
<javaFieldClass keyref="java.net.URI">URI</javaFieldClass>
</javaFieldDef>
</javaFieldDetail>
</javaField>
<javaMethod id="getNodeAvailability">
<apiName>getNodeAvailability</apiName>
<shortdesc>This method returns the availability of the node.</shortdesc>
<javaMethodDetail>
<javaMethodDef>
<javaMethodAccess value="public"/>
<javaReturn>
<javaMethodPrimitive value="boolean"/>
<apiDefNote>Whether the node is available for the specified operation.</apiDefNote>
</javaReturn>
<javaParam>
<javaMethodPrimitive value="int"/>
<apiItemName>operation</apiItemName>
<apiDefNote>This parameter identifies whether to check availability for reading
or writing the node. You should use the  <javafield href="#read">READ_OPERATION</javafield> or <javafield
href="#write">WRITE_OPERATION</javafield> constants to specify the operation.</apiDefNote>
</javaParam>
</javaMethodDef>
</javaMethodDetail>
</javaMethod>
<javaMethod id="priorTopicNode">
<apiName>priorTopicNode</apiName>
<shortdesc>This method iterates backward over the collection.</shortdesc>
<javaMethodDetail>
<javaMethodDef>
<javaMethodAccess value="public"/>
<javaReturn>
<javaMethodClass keyref="com.ibm.Topic">Topic</javaMethodClass>
<apiDefNote>The prior topic node or null if there is no node.</apiDefNote>
</javaReturn>
<javaException>
<javaMethodClass href="javaException1.dita"></javaMethodClass>
<apiDefNote>The topic node exists but couldn't be accessed.</apiDefNote>
</javaException>
</javaMethodDef>
<apiDesc>You can use the <javamethod href="#getNodeAvailability"></javamethod> method
to confirm that the node is available before traversal.</apiDesc>
</javaMethodDetail>
</javaMethod>
<javaMethod id="nextTopicNode">
<apiName>nextTopicNode</apiName>
<shortdesc>This method iterates forward over the collection.</shortdesc>
<javaMethodDetail>
<javaMethodDef>
<javaMethodAccess value="public"/>
<javaReturn>
<javaMethodClass keyref="com.ibm.Topic">Topic</javaMethodClass>
<apiDefNote>The next topic node or null if there is no node.</apiDefNote>
</javaReturn>
<javaException>
<javaMethodClass href="javaException1.dita"></javaMethodClass>
<apiDefNote>The topic node exists but couldn't be accessed.</apiDefNote>
</javaException>
</javaMethodDef>
<apiDesc>You can use the <javamethod href="#getNodeAvailability"></javamethod> method
to confirm that the node is available before traversal.</apiDesc>
</javaMethodDetail>
</javaMethod>
<javaMethod id="getTopicContent">
<apiName>getTopicContent</apiName>
<shortdesc>This method retrieves the content of the topic.</shortdesc>
<javaMethodDetail>
<javaMethodDef>
<javaMethodAccess value="public"/>
<javaReturn>
<javaMethodClass keyref="java.io.Reader">Reader</javaMethodClass>
<apiDefNote>A stream for the content.</apiDefNote>
</javaReturn>
<javaException>
<javaMethodClass keyref="java.io.IOException">IOException</javaMethodClass>
<apiDefNote>The stream couldn't be opened.</apiDefNote>
</javaException>
</javaMethodDef>
</javaMethodDetail>
</javaMethod>
</javaClass>
