<?xml version="1.0" encoding="utf-8"?>
<!-- (c) Copyright IBM Corp. 2005, 2006 All Rights Reserved. -->
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<!-- 
This file is part of the DITA Open Toolkit project hosted on Sourceforge.net.
See the accompanying license.txt file for applicable licenses.
-->
<task id="flagcontent" xml:lang="en-us">
	<title>Flagging content</title>
	<prolog>
		<author type="creator">IBM</author>
		<author type="contributor">Richard Johnson</author>
		<publisher>OASIS (Organization for the Advancement of Structured Information Standards)</publisher>
		<copyright>
			<copyryear year="2001, 2005"/>
			<copyrholder>IBM Corporation</copyrholder>
		</copyright>
		<critdates>
			<created date="2001"/>
			<revised modified="2005"/>
			<revised modified="2007-04-10"/>
		</critdates>
		<metadata>
			<keywords>
				<indexterm>metadata attributes<indexterm>flagging 
                    on</indexterm>
				</indexterm>
				<indexterm>flagging content</indexterm>
			</keywords>
		</metadata>
	</prolog>
	<taskbody>
		<prereq>Define a common set of images, and common alternative text for 
            them, so that you can flag consistent content across your 
            information set. Generally flagging is supported for block-level 
            elements such as paragraphs, but not for phrase-level elements 
            within a paragraph. This ensures that the images flagging the 
            content are easily scanned by the reader, instead of being buried 
            in text.</prereq>
		<context>
			<p>At least one value in at least one attribute must be set to "flag" 
                for the element to be flagged.</p>
		</context>
		<steps>
			<step>
				<cmd>Create a DITA filter file in the directory where you want to add 
                    the file. Give the file a descriptive name, such as 
                    "audience-flag-build.ditaval".</cmd>
			</step>
			<step>
				<cmd> Open the file, and type this content into it:</cmd>
				<tutorialinfo>
					<codeblock>&lt;?xml version="1.0" encoding="UTF-8"?> 
&lt;val> &lt;/val></codeblock>
				</tutorialinfo>
			</step>
			<step>
				<cmd>Define the property on which you want to flag:</cmd>
				<substeps>
					<substep>
						<cmd>Type a new property for flag by adding a new line 
                            <userinput>&lt;prop att="" val="" action="flag" img="" alt=""/></userinput>.</cmd>
					</substep>
					<substep>
						<cmd>Select the attribute ("audience", "platform", 
                            "product", "otherprops") you want to flag on. 
                            </cmd>
						<stepxmp>For example, "audience".</stepxmp>
					</substep>
					<substep>
						<cmd>Type the value you want to flag. </cmd>
						<stepxmp>For example, "programmer".</stepxmp>
					</substep>
					<substep>
						<cmd>Enter the image you want to use to flag the 
                            content. Local absolute paths, or relative
                            paths from the filter file both are supported. </cmd>
						<stepxmp>For example, "D:\resource\delta.gif".</stepxmp>
					</substep>
					<substep>
						<cmd>Type the alternate text for the image that will be 
                            used by screen readers. </cmd>
						<stepxmp>For example, "sample alt text".</stepxmp>
					</substep>
				</substeps>
				<info>You can define more properties by following the steps 
                    above. The final <filepath>.ditaval</filepath> file with the example values should look like 
                    this:<codeblock>&lt;?xml version="1.0" encoding="UTF-8"?> 
&lt;val>
  &lt;prop att="audience" val="programmer" action="flag" img="D:\resource\delta.gif" alt="sample alt text"/>
&lt;/val></codeblock>
				</info>
			</step>
			<step>
				<cmd>When you publish output from the topic or map, specify the 
                    <filepath>.ditaval</filepath> file you want by using the parameter 
                    <codeph>/filter:{args.input.valfile}</codeph> for the output options.</cmd>
			</step>
		</steps>
		<result>Content is flagged when any of the flagged values appear in 
            any of the attributes. When flagged values are found in a map, 
            links generated from affected topicrefs will be flagged on 
            output.</result>
		<example>
			<title>Examples</title>
			<dl>
				<dlentry>
					<dt>&lt;p audience="admin programmer"></dt>
					<dd>
						<p>When admin is set to flag, the paragraph will be 
                            preceded by the image you specified for admin.</p>
						<p>When both values are set to flag, both images will 
                            appear before the paragraph.</p>
					</dd>
				</dlentry>
				<dlentry>
					<dt>&lt;topicref platform="linux" href="abc.dita"></dt>
					<dd>When linux is set to flag, any links to abc.dita 
                        derived from this topic reference will be flagged with 
                        the image you specified. In addition, any links derived 
                        from child topicrefs will also be flagged: metadata 
                        attributes are inherited.</dd>
				</dlentry>
			</dl>
		</example>
	</taskbody>
</task>
