<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "../dtd/concept.dtd">
<!-- 
This file is part of the DITA Open Toolkit project hosted on Sourceforge.net.
See the accompanying license.txt file for applicable licenses.
-->
<concept id="processing_ditablogs">
	<title>DITAblogs (processing)</title>	
	<prolog>
		<author type="creator">Richard Johnson</author>
		<author type="contributor">Anna van Raaphorst</author>
		<publisher>OASIS (Organization for the Advancement of Structured Information Standards)</publisher>
		<copyright>
			<copyryear year="2007"/>
			<copyrholder>VR Communications, Inc.</copyrholder>
		</copyright>
		<critdates>
			<created date="2006-05-01"/>
			<revised modified="2007-08-20"/>
		</critdates>
		<metadata>
			<keywords>
				<keyword>processing DITA file</keyword>
				<keyword>building DITA file</keyword>
				<keyword>Ant script</keyword>
				<indexterm>Ant scripts<indexterm>production notes for</indexterm>
				</indexterm>
				<indexterm>DITAblogs
				<indexterm>Ant scripts</indexterm>
					<indexterm>processing (building)</indexterm>
				</indexterm>
			</keywords>
			<prodinfo>
				<prodname>DITA Open Toolkit</prodname>
				<vrmlist>
					<vrm version="1.4.1"/>
				</vrmlist>
			</prodinfo>
		</metadata>
	</prolog>
	<conbody>
		<section>
			<title>Ant script used to build this document</title>
			<p>To produce this document we used an Ant build script containing targets for building all  transformation types (often called "transtypes" or "targets") supported by DITA Open Toolkit. The location of the Toolkit, the location of the source files, and the location of the output files are variables that can be changed. Here is our script:</p>
			<codeblock>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!-- (c) Copyright VR Communications, Inc. All rights reserved. --&gt;
&lt;!-- Ant script for the DITA Open Toolkit User Guide (DITAOTUG) --&gt;
&lt;!-- Depending on the argument passed to the script at runtime, 
  this script processed to one (example: dita2xhtml), multiple, or all output targets. --&gt;
&lt;!-- This is a "user script," meant to be modified.
  However, be cautious in modifying the environment initialization section. --&gt;

&lt;!-- --&gt;
&lt;!-- ENVIRONMENT INITIALIZATION SECTION --&gt;
&lt;!-- --&gt;
&lt;!-- The project name is toolkitug. The default output target is xhtml. --&gt;

&lt;project name="toolkitug" default="xhtml"&gt;
	&lt;!-- This message is echoed to the screen at the beginning of the build process. --&gt;
	&lt;echo&gt;&lt;/echo&gt;
	&lt;echo&gt;Building DITA Open Toolkit User Guide&lt;/echo&gt;
	&lt;echo&gt;&lt;/echo&gt;
	&lt;!-- Allow the build process access to environment variables --&gt;
	&lt;property environment="env"/&gt;
	&lt;!-- Set toolkit directory from environment variable --&gt;
	&lt;property name="toolkit_dir" value="${env.DITA_DIR}"/&gt;
	&lt;!-- Note: basedir may be set in a higher-level script that invokes this one.
  Some plug-ins depend on its pointing to the Toolkit directory.  
  In particular, the Idiom plug-in, which is required for PDF2 processing, requires it. --&gt;
	&lt;property name="basedir" value="${env.DITA_DIR}"/&gt;
	&lt;!-- Define the location of the project (source file) directory.
  In this case, the project directory is up two directory levels from the location of this file. --&gt;
	&lt;property name="projdir" value="${ant.file}/../.."/&gt;
	&lt;!-- Define the location of the output directory.
  In this case, it is a directory directly above the project (source file) directory. --&gt;
	&lt;property name="outdir" value="${projdir}/../DITAOTUG_OUTPUT"/&gt;
	&lt;property name="PHPexe" value="C:/wamp/php/php.exe"/&gt;
	&lt;property name="args.logdir" value="${outdir}"/&gt;
	&lt;!-- Set the name of the (master) ditamap --&gt;
	&lt;property name="MAP_file" value="DITAOTUG.ditamap"/&gt;
	&lt;!-- Set the extension string for the dita files (files can also be .xml) --&gt;
	&lt;property name="EXTNAME" value=".dita"/&gt;
	&lt;!-- File for using otherprops filtering for non-pdf output --&gt;
	&lt;property name="ditaval_nonpdf" value="${projdir}/ditaval_files/otherprops_filtering.ditaval"/&gt;

	&lt;!-- Create the default XHTML output and debug cross-reference --&gt;
	&lt;target name="xhtml" depends="ditadebug, ditalinks, dita2xhtml"&gt;
  &lt;/target&gt;

	&lt;!-- --&gt;
	&lt;!-- BEGIN INSTANCE PROCESSING SECTION --&gt;
	&lt;!-- --&gt;
	&lt;!-- Names of the output types this script is capable of producing --&gt;
	&lt;!-- The target names are somewhat arbitrary. The following are traditional,
  and they allude to the source and target (for example, dita2xhtml). --&gt;

	&lt;target name="alltargets" depends="dita2xhtml, dita2htmlhelp, 
     dita2troff, dita2docbook, dita2javahelp, dita2wordrtf, dita2eclipsecontent,
     dita2eclipsehelp, dita2pdf2"&gt;
  &lt;/target&gt;

	&lt;!-- Handy abbreviation (all) for alltargets --&gt;
	&lt;target name="all" depends="allreports, alltargets"/&gt;

	&lt;!-- Create all reports --&gt;
	&lt;target name="allreports" depends="ditadebug, ditalinks, ditaauthors, ditaids, ditakeys"/&gt;

	&lt;!-- Create the ditamap debug cross-reference --&gt;
	&lt;target name="ditadebug"&gt;
		&lt;echo&gt;Building debugging cross-reference file ditadebug.txt&lt;/echo&gt;
		&lt;mkdir dir="${outdir}/debug_files"/&gt;
		&lt;exec executable="${PHPexe}" dir="${projdir}" output="${outdir}/debug_files/ditadebug.txt"&gt;
			&lt;arg value="${projdir}/project/tools/ditadebug.php"/&gt;
			&lt;arg value="${MAP_file}"/&gt;
		&lt;/exec&gt;
	&lt;/target&gt;

	&lt;!-- Create plausible preview --&gt;
	&lt;target name="preview"&gt;
		&lt;echo&gt;Building XHTML plausible preview&lt;/echo&gt;
		&lt;mkdir dir="${outdir}/debug_files"/&gt;
		&lt;exec executable="${PHPexe}" dir="${projdir}" output="${outdir}/debug_files/ditapreview.txt"&gt;
			&lt;arg value="${projdir}/project/tools/ditapreview.php"/&gt;
			&lt;arg value="${MAP_file}"/&gt;
			&lt;arg value="L"/&gt;
		&lt;/exec&gt;
	&lt;/target&gt;

	&lt;!-- Create the ditamap URL check --&gt;
	&lt;target name="ditalinks"&gt;
		&lt;echo&gt;Building URL check file ditalinks.txt&lt;/echo&gt;
		&lt;mkdir dir="${outdir}/debug_files"/&gt;
		&lt;exec executable="${PHPexe}" dir="${projdir}" output="${outdir}/debug_files/ditalinks.txt"&gt;
			&lt;arg value="${projdir}/project/tools/ditalinks.php"/&gt;
			&lt;arg value="${MAP_file}"/&gt;
		&lt;/exec&gt;
	&lt;/target&gt;

	&lt;!-- Create the ditamap author and copyright statistics --&gt;
	&lt;target name="ditaauthors"&gt;
		&lt;echo&gt;Building author/copyright file ditaauth.txt&lt;/echo&gt;
		&lt;mkdir dir="${outdir}/debug_files"/&gt;
		&lt;exec executable="${PHPexe}" dir="${projdir}" output="${outdir}/debug_files/ditaauthors.txt"&gt;
			&lt;arg value="${projdir}/project/tools/ditaauthors.php"/&gt;
			&lt;arg value="${MAP_file}"/&gt;
		&lt;/exec&gt;
	&lt;/target&gt;

	&lt;!-- Create the ditamap ID listing  --&gt;
	&lt;target name="ditaids"&gt;
		&lt;echo&gt;Building ID list file ditaids.txt&lt;/echo&gt;
		&lt;mkdir dir="${outdir}/debug_files"/&gt;
		&lt;exec executable="${PHPexe}" dir="${projdir}" output="${outdir}/debug_files/ditaids.txt"&gt;
			&lt;arg value="${projdir}/project/tools/ditaids.php"/&gt;
			&lt;arg value="${MAP_file}"/&gt;
		&lt;/exec&gt;
	&lt;/target&gt;

	&lt;!-- Create the ditamap keyword metadata statistics --&gt;
	&lt;target name="ditakeys"&gt;
		&lt;echo&gt;Building keyword metadata file ditakeys.txt&lt;/echo&gt;
		&lt;mkdir dir="${outdir}/debug_files"/&gt;
		&lt;exec executable="${PHPexe}" dir="${projdir}" output="${outdir}/debug_files/ditakeys.txt"&gt;
			&lt;arg value="${projdir}/project/tools/ditakeys.php"/&gt;
			&lt;arg value="${MAP_file}"/&gt;
		&lt;/exec&gt;
	&lt;/target&gt;

	&lt;!-- Create xhtml output --&gt;
	&lt;target name="dita2xhtml"&gt;
		&lt;ant antfile="${toolkit_dir}${file.separator}build.xml" target="init"&gt;
			&lt;property name="args.input" value="${projdir}/${MAP_file}"/&gt;
			&lt;property name="output.dir" value="${outdir}/xhtml"/&gt;
			&lt;property name="dita.temp.dir" value="${outdir}/temp"/&gt;
			&lt;property name="transtype" value="xhtml"/&gt;
			&lt;property name="args.draft" value="yes"/&gt;
			&lt;property name="args.indexshow" value="no"/&gt;
			&lt;property name="args.css" value="${projdir}/css_files/DITAOTUG_CSS.css"/&gt;
			&lt;property name="args.csspath" value="CSS"/&gt;
			&lt;property name="args.copycss" value="yes"/&gt;
			&lt;property name="args.xhtml.toc" value="toc"/&gt;
			&lt;property name="dita.extname" value="${EXTNAME}"/&gt;
			&lt;property name="dita.input.valfile" value="${ditaval_nonpdf}"/&gt;
		&lt;/ant&gt;
		&lt;!-- Copy index.html to the output directory --&gt;
		&lt;copy todir="${outdir}/xhtml"&gt;
			&lt;fileset dir="${projdir}/build_files"/&gt;
		&lt;/copy&gt;
	&lt;/target&gt;

	&lt;!-- Create htmlhelp output --&gt;
	&lt;target name="dita2htmlhelp"&gt;
		&lt;ant antfile="${toolkit_dir}${file.separator}build.xml" target="init"&gt;
			&lt;property name="args.input" value="${projdir}/${MAP_file}"/&gt;
			&lt;property name="output.dir" value="${outdir}/htmlhelp"/&gt;
			&lt;property name="dita.temp.dir" value="${outdir}/temp"/&gt;
			&lt;property name="transtype" value="htmlhelp"/&gt;
			&lt;property name="args.draft" value="yes"/&gt;
			&lt;property name="args.indexshow" value="yes"/&gt;
			&lt;property name="args.css" value="${projdir}/css_files/DITAOTUG_CSS.css"/&gt;
			&lt;property name="args.csspath" value="CSS"/&gt;
			&lt;property name="args.copycss" value="yes"/&gt;
			&lt;property name="dita.extname" value="${EXTNAME}"/&gt;
			&lt;property name="dita.input.valfile" value="${ditaval_nonpdf}"/&gt;
		&lt;/ant&gt;
	&lt;/target&gt;

	&lt;!-- Create tocjs output --&gt;
	&lt;target name="dita2tocjs"&gt;
		&lt;ant antfile="${toolkit_dir}${file.separator}build.xml" target="init"&gt;
			&lt;property name="args.input" value="${projdir}/${MAP_file}"/&gt;
			&lt;property name="output.dir" value="${outdir}/tocjs"/&gt;
			&lt;property name="dita.temp.dir" value="${outdir}/temp"/&gt;
			&lt;property name="transtype" value="tocjs"/&gt;
			&lt;property name="clean.temp" value="no"/&gt;
			&lt;property name="args.css" value="${projdir}/css_files/DITAOTUG_CSS.css"/&gt;
			&lt;property name="args.csspath" value="CSS"/&gt;
			&lt;property name="args.copycss" value="yes"/&gt;
			&lt;property name="dita.extname" value="${EXTNAME}"/&gt;
			&lt;property name="dita.input.valfile" value="${ditaval_nonpdf}"/&gt;
		&lt;/ant&gt;
	&lt;/target&gt;

	&lt;!-- Create pdf output --&gt;
	&lt;target name="dita2pdf"&gt;
		&lt;ant antfile="${toolkit_dir}${file.separator}build.xml" target="init"&gt;
			&lt;property name="args.input" value="${projdir}/${MAP_file}"/&gt;
			&lt;property name="output.dir" value="${outdir}/pdf"/&gt;
			&lt;property name="dita.temp.dir" value="${outdir}/temp"/&gt;
			&lt;property name="transtype" value="pdf"/&gt;
			&lt;property name="args.draft" value="yes"/&gt;
			&lt;property name="args.indexshow" value="yes"/&gt;
			&lt;!-- &lt;property name="args.xsl" value="${toolkit_dir}/xsl/xdita2fo-shell.xsl"/&gt; --&gt;
			&lt;property name="dita.extname" value="${EXTNAME}"/&gt;
		&lt;/ant&gt;
	&lt;/target&gt;

	&lt;!-- Create docbook output --&gt;
	&lt;target name="dita2docbook"&gt;
		&lt;ant antfile="${toolkit_dir}${file.separator}build.xml" target="init"&gt;
			&lt;property name="args.input" value="${projdir}/${MAP_file}"/&gt;
			&lt;property name="output.dir" value="${outdir}/docbook"/&gt;
			&lt;property name="dita.temp.dir" value="${outdir}/temp"/&gt;
			&lt;property name="transtype" value="docbook"/&gt;
			&lt;property name="args.draft" value="yes"/&gt;
			&lt;property name="args.indexshow" value="yes"/&gt;
			&lt;property name="dita.extname" value="${EXTNAME}"/&gt;
		&lt;/ant&gt;
	&lt;/target&gt;

	&lt;!-- Create javahelp output --&gt;
	&lt;target name="dita2javahelp"&gt;
		&lt;property name="jarfile" value="${outdir}/javahelp/DITAOTUG.jar"/&gt;
		&lt;ant antfile="${toolkit_dir}${file.separator}build.xml" target="init"&gt;
			&lt;property name="args.input" value="${projdir}/${MAP_file}"/&gt;
			&lt;property name="output.dir" value="${outdir}/javahelp"/&gt;
			&lt;property name="dita.temp.dir" value="${outdir}/temp"/&gt;
			&lt;property name="transtype" value="javahelp"/&gt;
			&lt;property name="args.draft" value="yes"/&gt;
			&lt;property name="args.indexshow" value="yes"/&gt;
			&lt;property name="dita.extname" value="${EXTNAME}"/&gt;
			&lt;property name="dita.input.valfile" value="${ditaval_nonpdf}"/&gt;
		&lt;/ant&gt;
		&lt;delete file="${jarfile}"/&gt;
		&lt;jar destfile="${jarfile}" basedir="${outdir}/javahelp" includes="**"&gt;
    &lt;/jar&gt;
	&lt;/target&gt;

	&lt;!-- Create troff output --&gt;
	&lt;target name="dita2troff"&gt;
		&lt;ant antfile="${toolkit_dir}${file.separator}build.xml" target="init"&gt;
			&lt;property name="args.input" value="${projdir}/${MAP_file}"/&gt;
			&lt;property name="output.dir" value="${outdir}/troff"/&gt;
			&lt;property name="dita.temp.dir" value="${outdir}/temp"/&gt;
			&lt;property name="transtype" value="troff"/&gt;
			&lt;property name="args.draft" value="yes"/&gt;
			&lt;property name="args.indexshow" value="yes"/&gt;
			&lt;property name="dita.extname" value="${EXTNAME}"/&gt;
		&lt;/ant&gt;
	&lt;/target&gt;

	&lt;!-- Create wordrtf output --&gt;
	&lt;target name="dita2wordrtf"&gt;
		&lt;ant antfile="${toolkit_dir}${file.separator}build.xml" target="init"&gt;
			&lt;property name="args.input" value="${projdir}/${MAP_file}"/&gt;
			&lt;property name="output.dir" value="${outdir}/wordrtf"/&gt;
			&lt;property name="dita.temp.dir" value="${outdir}/temp"/&gt;
			&lt;property name="transtype" value="wordrtf"/&gt;
			&lt;property name="args.draft" value="yes"/&gt;
			&lt;property name="args.indexshow" value="yes"/&gt;
			&lt;property name="dita.extname" value="${EXTNAME}"/&gt;
		&lt;/ant&gt;
	&lt;/target&gt;

	&lt;!-- Create eclipsecontent output --&gt;
	&lt;target name="dita2eclipsecontent"&gt;
		&lt;ant antfile="${toolkit_dir}${file.separator}build.xml" target="init"&gt;
			&lt;property name="args.input" value="${projdir}/${MAP_file}"/&gt;
			&lt;property name="output.dir" value="${outdir}/eclipsecontent"/&gt;
			&lt;property name="dita.temp.dir" value="${outdir}/temp"/&gt;
			&lt;property name="transtype" value="eclipsecontent"/&gt;
			&lt;property name="args.draft" value="yes"/&gt;
			&lt;property name="args.indexshow" value="yes"/&gt;
			&lt;property name="dita.extname" value="${EXTNAME}"/&gt;
			&lt;property name="dita.input.valfile" value="${ditaval_nonpdf}"/&gt;
		&lt;/ant&gt;
	&lt;/target&gt;

	&lt;!-- Create eclipsehelp output --&gt;
	&lt;target name="dita2eclipsehelp"&gt;
		&lt;ant antfile="${toolkit_dir}${file.separator}build.xml" target="init"&gt;
			&lt;property name="args.input" value="${projdir}/${MAP_file}"/&gt;
			&lt;property name="output.dir" value="${outdir}/ditaotug_top_1.0"/&gt;
			&lt;property name="dita.temp.dir" value="${outdir}/temp"/&gt;
			&lt;property name="transtype" value="eclipsehelp"/&gt;
			&lt;property name="args.draft" value="yes"/&gt;
			&lt;property name="args.indexshow" value="yes"/&gt;
			&lt;property name="dita.extname" value="${EXTNAME}"/&gt;
			&lt;property name="dita.input.valfile" value="${ditaval_nonpdf}"/&gt;
		&lt;/ant&gt;
	&lt;/target&gt;

	&lt;!-- Create FrameMaker Adapter output --&gt;
	&lt;target name="dita2fmxml"&gt;
		&lt;ant antfile="${toolkit_dir}${file.separator}build.xml" target="init"&gt;
			&lt;property name="args.input" value="${projdir}/${MAP_file}"/&gt;
			&lt;property name="output.dir" value="${outdir}/fmxml"/&gt;
			&lt;property name="dita.temp.dir" value="${outdir}/temp"/&gt;
			&lt;property name="transtype" value="fmxml"/&gt;
			&lt;property name="dita.extname" value="${EXTNAME}"/&gt;
		&lt;/ant&gt;
	&lt;/target&gt;

	&lt;!-- Create Idiom FO output --&gt;
	&lt;target name="dita2pdf2"&gt;
		&lt;ant antfile="${toolkit_dir}${file.separator}build.xml" target="init"&gt;
			&lt;property name="args.input" value="${projdir}/${MAP_file}"/&gt;
			&lt;property name="output.dir" value="${outdir}/pdf2"/&gt;
			&lt;property name="dita.temp.dir" value="${outdir}/temp"/&gt;
			&lt;property name="transtype" value="pdf2"/&gt;
			&lt;property name="args.draft" value="yes"/&gt;
			&lt;property name="args.indexshow" value="yes"/&gt;
			&lt;property name="dita.extname" value="${EXTNAME}"/&gt;
		&lt;/ant&gt;
	&lt;/target&gt;
&lt;/project&gt;

			</codeblock>
			<p>In the Windows operating environment we built to all transtypes to make sure they would build cleanly. On Linux, we tested XHTML output only.</p>
			<p>We use a Windows batch file (<filepath>runbuild.bat</filepath>) to initiate the build. The batch file calls the DITA Ant logger that types a summary of build progress on the console (rather than a more verbose set of messages) and uses a log file to capture the details. Here is our batch file:</p>
			<codeblock>
ant -Dbasedir=%DITA_DIR% -f ant_scripts\DITAOTUG_all.xml -logger org.dita.dost.log.DITAOTBuildLogger %1
            </codeblock>
			<p>This method gives us enough information on the console screen to tell whether or not the build was successful and whether any errors occurred that need immediate attention. </p>
		</section>
	</conbody>
</concept>
