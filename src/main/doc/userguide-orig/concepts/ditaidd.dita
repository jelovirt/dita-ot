<?xml version="1.0" encoding="utf-8"?>
<!-- (c) Copyright IBM Corp. 2004, 2006 All Rights Reserved. -->
<!DOCTYPE concept PUBLIC "-//IBM//DTD DITA Concept//EN"
 "..\dtd\concept.dtd">
<concept id="ditaidd" xml:lang="en-us">
<title>DITA and IBMIDDoc</title>
<shortdesc>DITA concentrates on a different level of information than IBMIDDoc,
and different models of reuse. It also enables different kinds of customization
and specialization.</shortdesc>
<prolog><metadata>
<keywords><indexterm>DITA and IBMIDDoc</indexterm><indexterm>IBMIDDoc and
DITA</indexterm></keywords>
</metadata></prolog>
<conbody>
<p>Although both DITA and IBMIDDoc focus on delivering technical information,
there are significant differences. IBMIDDoc focusses primarily on delivering
books, in the form of a continuous technical narrative, whereas DITA focuses
on delivering topics, which can be assembled into a continuous narrative,
or linked together into an interlocking system of online help or Web pages.</p>
<p>The optimal structure for a printable book often differs from the structure
that works best for information that is delivered by Web or through online
help. IBMIDDoc content can be repurposed into HTML Help, as well as WinHelp
and Web pages, which means that it is not used solely for producing books.
However, DITA has some advantages over IBMIDDoc's more continuous, book-optimized
structure in that DITA was designed for authoring discrete technical topics.</p>
<p>DITA's design also strives to provide independent reuse of topics within
any desired delivery context. With a <q>topic</q> as the primary unit of content,
DITA is well-positioned to evolve with the tide of progress in information
delivery that favors recombining and reusing information to create multiple
deliverables. Reusing information that was originally authored for a book
is much more difficult.</p>
<p>DITA can collect topics into information sets using maps. The core DITA
information types are not intended to cover all requirements, but rather provide
a base for meeting new requirements through extension and specialization.</p>
<p>DITA's core advantages rest on granularity and specialization:</p>
<dl><dlentry>
<dt>Granularity</dt>
<dd><indexterm>reuse<indexterm>granularity</indexterm></indexterm>To reuse
the content of a book, the book must be broken up into smaller chunks. It
is hard to resist the temptation to author these chunks in the context of
their document order: assuming they can see what the previous topic is, assuming
they can easily flip back to the start of a chapter for more general information.
As a result, even well-chunked information authored in a book-oriented document
can end up being hard to reuse outside the book. By contrast, when you author
information in article-sized chunks that are designed to stand alone, you
can combine the articles to make a book, plug the articles into a user interface
to provide help within an application, or store the articles in a database
and display them for an application user on demand.</dd>
</dlentry><dlentry>
<dt>Specialization</dt>
<dd><indexterm>specialization</indexterm>The vocabulary of DITA
can be extended through specialization, which brings the benefits of object-oriented
design to information typing. Authors can use only the information types that
they need, and DITA designers can easily add new information types as well
as manipulate specific information types as if they were general. While right
now we are still exploring the possibilities of our core information types,
specialization promises that we can expand our capabilities and specialize
our designs in the future, without needing to migrate architectures or give
up interchangeability.</dd>
</dlentry></dl>
<p>If your content is primarily print-oriented, IBMIDDoc is the appropriate
markup for your content. If your content is either primarily online or extensively
single-sourced (for both print and online), DITA is the appropriate choice.
If neither language meets your needs, DITA's model includes extensibility
options that can let you customize the output or even specialize the language
to accommodate a design that meets your needs while remaining compatible with
DITA processing tools and architectures.</p>
</conbody>
</concept>
