<?xml version="1.0" encoding="utf-8"?>
<!-- (c) Copyright IBM Corp. 2004, 2006 All Rights Reserved. -->
<!DOCTYPE concept PUBLIC "-//IBM//DTD DITA Concept//EN"
 "..\dtd\concept.dtd">
<concept id="ditahtm" xml:lang="en-us">
<title>DITA and HTML</title>
<shortdesc>We've all heard a lot about the advantages of XML in general and
DITA in particular for creating technical content. Nonetheless, many of us
have the same questions: <q>Since my output deliverables are exclusively HTML
and will stay that way for the foreseeable future, why go the route of creating
content in an intermediary XML format and generating HTML? Why not produce
HTML directly with an HTML editor? Why go through the extra cycles involved
in producing and managing DITA XML content when it seems so much easier to
simply write and produce the HTML directly, with tools that were specifically
created to support doing that?</q></shortdesc>
<prolog><metadata>
<keywords><indexterm>DITA and HTML</indexterm><indexterm>HTML and DITA</indexterm>
</keywords>
</metadata></prolog>
<conbody></conbody>
<concept id="htmlwhen">
<title>When is it appropriate to author in HTML?</title>
<shortdesc>Let's start by saying that, yes, there are some situations where
it might make more sense to create outputs directly in HTML, as opposed to
DITA XML.</shortdesc>
<conbody>
<dl><dlentry>
<dt>You're creating a special-purpose HTML-based UI.</dt>
<dd>HTML is more appropriate than DITA when you need to create a one-of-a-kind
interface, such as a calculator tool. DITA is not a replacement for the complete
range of programmatic freedom afforded by HTML + JavaScript + CGI/asp back-end
code + applets + CSS + DHTML + (on and on). You need to use the tool appropriate
for the requirement. DITA represents an information model for technical product
content. In this sense, DITA instructs the user about the system, whereas
UI construction tools help instruct the system about the user, or adorn how
the user sees the information about the system. DITA is the semantic framework
for the information. In contrast, UI, forms and style tools create the behavior
and appearance for that framework. When you're providing behavior and appearance
instead of content, it may make more sense to use HTML directly.</dd>
</dlentry><dlentry>
<dt>You're working on a prototype or a one-of-a-kind deliverable. </dt>
<dd><p>For a one-of-a-kind project or deliverable, with no expectation of
long-term maintenance, it may make sense to take the "quick and dirty" route
and author technical product content directly in HTML. For example, you might
choose to author an individual Web page or an occasional newsletter directly
in HTML. You also may need to prototype content for delivery with a new product
offering. Direct HTML authoring provides the ability to prototype with uniquely
customized pages. </p><p>The following characteristics of prototypes and one-of-a-kind
deliverables make them suitable for HTML authoring:<ul>
<li>It's not important that the structure and content of your information
match up with similar content being produced by other writers on the same
or other teams. Matching up HTML styles requires extensive up-front coordination
and planning as well as ongoing editorial vigilance. Changing styles and behavior
mid-stream often proves difficult, if not impossible.</li>
<li>Consistency from page to page is not important.</li>
<li>You know that styles and behavior will not need to change midstream.</li>
<li>You're comfortable taking on the entire responsibility for the styling,
look-and-feel, and overall presentation of the content in all possible browsers
and platforms in which it might appear.</li>
</ul></p></dd>
</dlentry></dl>
</conbody>
</concept>
<concept id="htmlprob">
<title>What's the problem with authoring directly in HTML?</title>
<shortdesc>For authoring most technical content, including help, manuals,
and other user assistance, however, working directly in HTML has a number
of limitations and problems.</shortdesc>
<conbody>
<dl><dlentry>
<dt>Difficult to make global changes. </dt>
<dd>Once you've created a set of HTML pages that follow a particular style
and content guidelines, it's difficult and labor-intensive to make global
changes. Cascading style sheets (CSS) may provide some help, but often the
kinds of changes you require go beyond what CSS can accomplish. And making
any change to one HTML page means you must search and replace parallel changes
in all the other pages you've created. And minor inconsistencies can pose
major problems for such a search and replace approach. Slight variations in
how the HTML was created can often foil the match. </dd>
</dlentry><dlentry>
<dt>Not extensible. </dt>
<dd>You can develop HTML content that follows agreed-upon information typing
standards. However, as you encounter the need for new types of information,
it's often difficult to extend an HTML design to both accommodate new information
types as well as the legacy types. It's also difficult to enforce agreed-upon
guidelines for creating information types. With HTML, you find you're constantly
reinventing the wheel each time you adjust your information architecture.</dd>
</dlentry><dlentry>
<dt>Difficult to determine information completeness. </dt>
<dd>HTML doesn't easily provide a systematic way to check that a set of topics
includes the full set of concept, task, and reference topics needed to document
a product feature. As a result, it's difficult to gauge progress, and impossible
to ensure information completeness.</dd>
</dlentry><dlentry>
<dt>Not portable or consistent. </dt>
<dd>HTML content is notoriously difficult to share across product groups,
or with external business partners. Yes, anyone with a browser can display
your HTML pages, but mixing and matching HTML that follows different content
and presentation models quickly becomes unwieldy. Navigation, layout, headings,
and general presentation style lack overall consistency as users navigate
from topic to topic.  And there's really no way to do anything about it, short
of reworking each information set to match the common standard. But what about
the next business partner who adds another content plug-in to your information
set?</dd>
</dlentry></dl>
</conbody>
</concept>
<concept id="whyxmlnotdita">
<title>Why author in DITA XML?</title>
<shortdesc>So, enough already, HTML may have its weaknesses, but it's the
devil I know. If not HTML, tell me what's so compelling about authoring in
DITA XML and then generating HTML.</shortdesc>
<conbody>
<section><title>XML background</title><p>XML is an abbreviation for eXstensible
Markup Language, which is a text-based tag language that is similar to HTML.
Unlike HTML, however, XML has no predefined tags. How tags are defined and
how information is stored in XML is determined by the information designer.
Some of the advantages of XML include the following:<ul>
<li>XML stresses the structure of the content, not the form; layout is maintained
separately in most XML designs. </li>
<li>It provides for greater consistency of content, and assures greater consistency
of the presentation of that content, on a wider variety of output devices
and formats. </li>
<li>It offers lots of other nice things, including conditional processing,
automatic linking and link checking, and a powerful re-use model. </li>
</ul></p><p>At IBM, the move to XML for information development is based on
taking advantage of several unique features of XML:<dl><dlentry>
<dt>Open standards. </dt>
<dd>XML is an open industry standard, controlled by the World Wide Web Consortium
(W3C). XML provides an application- and system-independent format for sharing
and exchanging content, made better when sharing organizations use an agreed
upon tagging system, such as defined in a document type definition (DTD) or
other schema.</dd>
</dlentry><dlentry>
<dt>Separation of form from content. </dt>
<dd>XML separates form -- that is, presentation, look, and layout -- from
content. This separation makes it possible to present the same source content
in different formats -- for example, as Web pages, printed pages, or other
delivery media. Consequently, a program can transform the presentation to
give an entire Web site a new style without changing the underlying content.
 Branding may be isolated into a presentation file so that when we need to
integrate information across brands; with separation of style and content
specific brand styles do not interfere with integration.</dd>
</dlentry><dlentry>
<dt>Extensible and meaningful tags. </dt>
<dd>XML is a "meta language" for describing user-defined markup and tags.
Tags can be designed to have a specific meaning and label specific content.
For example, a zip code in an address might use a tag called "zipcode;" a
step in a procedure, "step." Using the tags provided by an information designer,
an author marks the content according to its meaning, and then based on the
tags, processing systems (such as search and personalization software) filter
and format the content, targeted and delivered to specific groups of users.</dd>
</dlentry><dlentry>
<dt>Consistent tools. </dt>
<dd>The reliance on open standards provides the popular foundation from which
can emerge a wide variety of tools for creating, managing, and deploying XML
content.</dd>
</dlentry></dl></p></section>
</conbody>
</concept>
<concept id="authindita">
<title>Authoring and processing in DITA</title>
<shortdesc>At IBM, a team of information development (ID) professionals has
developed DITA (short for Darwin Information Typing Architecture), an XML
DTD and architecture specifically for technical content. DITA seeks to apply
all these generic features of XML to specific advantage for creating, managing,
and deploying technical content with and about our products.  </shortdesc>
<conbody>
<p>DITA's unique strength for technical information stems from two key features:<dl>
<dlentry>
<dt>Topic-based and modular. </dt>
<dd>DITA is an architecture for creating and delivering topic-based, modular
technical information. In DITA, the core information unit is a topic, which
describes a single task, concept, or reference item. Because DITA is topic-based,
DITA content can be combined, recombined, and reused to create on-line help,
printed books, Web-based information centers, and product support portals,
to name a few.</dd>
</dlentry><dlentry>
<dt>Based on information types that can be specialized. </dt>
<dd><p>An information type defines the role of a topic. DITA includes three
information types derived from the base topic type: concept, task, and reference.
A task topic presents the step-by-step procedure for a task. Task topics answer
"How do I?" questions for a specific task. Concept topics provide the reason
behind the tasks by defining terms and explaining concepts. A reference topic
provides information about a specific command, message, program option, API,
and so on. Because DITA supports concept, task, and reference topics, writers
and editors can quickly determine if a new function has been completely documented.
For example, finding task topics that are not supported by concept topics
may indicate that additional writing is required. </p><p>Through DITA specialization,
you can create and enforce a consistent information architecture. For example,
a specialized topic used to document a C++ API includes rules that force writers
to compose a set of required content. Within DITA you can define how to document
a return value. Users of this kind of highly structured content become familiar
with the consistent structure of the information and find they can almost
intuitively locate topics. For example, searching for "an install step for
an expert" or searching for "return values in C++."</p></dd>
</dlentry></dl></p>
<p>DITA leverages the advantages inherent in XML and extends beyond those
advantages, in the following ways:<dl><dlentry>
<dt>Easy global changes through customized transforms. </dt>
<dd>With DITA and XSLT, you can update the structure and presentation of an
entire information set by applying a consistent, core transform. You can automate
things like building summary tables and listing linked topics. And because
these global changes get applied during output, you can apply different sets
of global changes for different output. In this way you can generate customized
outputs for print vs. on-line, or for different platform or branding requirements,
without having to edit and adjust the source each time. You can quickly respond
to customer demands for new and updated product information.</dd>
</dlentry><dlentry>
<dt>Portable through standards. </dt>
<dd>Using DITA, product groups and external business partners can easily share
and exchange content. Third parties can use "common" transformation and presentation
models with DITA, or create specialized processing to offer views and presentation
of content that is company- or brand-specific. This content portability is
critical for maintaining arrangements with third-party partners and for ensuring
that a writing team remains productive through business reorganizations, mergers,
acquisitions, and spin-offs.</dd>
</dlentry><dlentry>
<dt>Linking and web management. </dt>
<dd>DITA makes it possible to create and maintain cross-topic links from outside
the topic itself. This helps avoid the problems with hard-coded links, which
need to be regularly tested and updated as filenames and topic titles change.
In addition, DITA "maps" enable single-sourcing of topic links based on information
about the overall topic navigation hierarchy. You can apply different sets
of links in different situations. For example, when your topics are included
in product A, include the appropriate links for that product. For product
B, include a second set of links. Similarly, when you're incorporating content
produced by another team, you can add appropriate links to their topics during
processing, without editing their source. You can even add links after topics
have shipped to translation.</dd>
</dlentry><dlentry>
<dt>Conditional processing. </dt>
<dd>With DITA, you can tag parts of a topic by product, audience, and other
characteristics. You can then include, exclude, or otherwise flag that content
for reuse or specialized presentation.</dd>
</dlentry><dlentry>
<dt>Reuse. </dt>
<dd>You can reuse topics in different collections using maps, and you can
reuse content between topics as well, maintaining common elements like definitions,
warnings, and product names in a central place. With DITA, writers can assemble
topics about a specific set of issues and publish them as a unique deliverable.
For example, a customer support team might compile from existing, diverse
sources a particular set of topics that provide a customized solution to a
problem reported by a major customer.</dd>
</dlentry><dlentry>
<dt>Focused content and better writing. </dt>
<dd>Topic-based authoring produces better writing. Categorizing content into
concept, task, and reference topics ensures that users can perform tasks faster
because the information is focused. In addition, users can search for information
based on their company role, their job responsibilities, and their task goals. </dd>
</dlentry></dl></p>
</conbody>
</concept>
<concept id="htmlbott">
<title>Bottom line</title>
<shortdesc>It's possible to achieve some of the above benefits through highly
disciplined authoring of HTML and subsequent processing of the authored HTML.
However, this quickly becomes a "bits and pieces" process. For example, you
might tweak HTML to support a form of conditional processing, but by so doing,
make it difficult to generate a customized presentation. Then, when you tweak
the HTML to improve the presentation, you may need to re-work the content
and form of the topic navigation links.</shortdesc>
<conbody>
<p>XML and DITA overcome this "bits and pieces" problem of HTML. It consolidates
all of the benefits in a consistent, overall information architecture that
can evolve and grow along with your product information needs and delivery
modes. </p>
</conbody>
</concept>
</concept>
