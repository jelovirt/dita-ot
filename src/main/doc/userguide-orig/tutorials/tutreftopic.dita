<?xml version="1.0" encoding="utf-8"?>
<!-- (c) Copyright IBM Corp. 2004, 2006 All Rights Reserved. -->
<!DOCTYPE dita PUBLIC "-//IBM//DTD DITA Composite//EN"
 "..\dtd\ditabase.dtd">
<dita>
<task id="tutreftopic" xml:lang="en-us">
<title>Tutorial: Creating a reference topic</title>
<shortdesc>Learn how to create a reference topic, including a syntax section,
a properties table, description, and an example.</shortdesc>
<prolog><metadata>
<keywords><indexterm>reference topics<indexterm>tutorial</indexterm></indexterm>
</keywords>
</metadata></prolog>
<taskbody>
<result>After completing this tutorial you will know:<ul>
<li>How to add syntax descriptions</li>
<li>How to add purpose and usage descriptions</li>
<li>How to describe properties</li>
<li>How to add examples</li>
</ul></result>
</taskbody>
<concept id="reftopic" conref="../concepts/reftopic.dita#reftopic">
<title>Reference topics</title>
<conbody></conbody>
</concept>
<task id="prepdir" conref="tuttopic.dita#prepdir">
<title>Preparing a project directory</title>
<taskbody></taskbody>
</task>
<task id="start">
<title>Starting the reference topic</title>
<shortdesc>Reference topics are created using the reference DTD. Reference
topics contain sections, examples, syntax descriptions, and various kinds
of table.</shortdesc>
<taskbody>
<steps>
<step><cmd>Start your editor, and open a new reference topic..</cmd></step>
<step><cmd>Change the <i>title</i> to <userinput>topicref element</userinput>.</cmd>
</step>
<step><cmd>Change the <i>id</i> to <userinput>topicref</userinput>.</cmd>
</step>
<step><cmd>Save the reference topic as <filepath>tut-content/ref/topicref.dita</filepath>.</cmd>
</step>
<step><cmd>Delete all the content of the body, and leave just an empty refbody
element.</cmd></step>
<step><cmd>Insert a short description after the title: <userinput>The topicref
element is used in maps to reference the topics that the map organizes.</userinput></cmd>
<info>As introduced earlier, the short description needs to make sense on
its own as a preview of the reference topic, as well as serving as a short
introduction before getting into the rest of the content.</info></step>
</steps>
</taskbody>
</task>
<task id="refsyn">
<title>Adding syntax information</title>
<shortdesc>Use the &lt;refsyn> element to contain syntax information, such
as command-line interfaces or method signatures. Within the &lt;refsyn>, you
can add &lt;synph> or &lt;syntaxdiagram> elements, as well as descriptive
text.</shortdesc>
<taskbody>
<steps>
<step><cmd>Add a &lt;refsyn> element to the body.</cmd></step>
<step><cmd>Add a &lt;title> to the &lt;refsyn>: <userinput>&lt;title>Syntax&lt;/title></userinput></cmd>
</step>
<step><cmd>Add the syntax information.</cmd><stepxmp><p><codeph>&amp;lt;topicref
href="&lt;varname>URL&lt;/varname>" collection-type="&lt;varname>type&lt;/varname>"
navtitle="&lt;varname>title&lt;/varname>"/></codeph></p><note>When you enter
the <q>&lt;</q> character; the editor converts it to the &amp;lt; symbol automatically.
You should type the &lt; character; do not type the &amp;lt; symbol.</note></stepxmp>
<info><p>This is actually a much simplified syntax description, which we're
including to show what the &lt;refsyn> element is intended for. For more descriptive
markup you can use a &lt;synph> element inside the &lt;refsyn>. For more complex
syntax descriptions, you can also create complete syntax diagrams using the &lt;syntaxdiagram>
element.</p></info></step>
</steps>
</taskbody>
</task>
<task id="purpose">
<title>Adding purpose information</title>
<shortdesc>Use sections to contain descriptions of the element's purpose,
and potential usages.</shortdesc>
<taskbody>
<steps>
<step><cmd>Add a section titled "Purpose" that describes briefly what the
topicref is for.</cmd><stepxmp><p><codeph>&lt;section>&lt;title>Purpose&lt;/title>The
topicref element typically points to a topic (such as a concept, task, or
reference). A topicref can contain other topicrefs, allowing you to express
navigation or table-of-contents hierarchies, as well as implying relationships
between the containing topicref and its children. You can set the collection-type
of a container topicref to determine how its children are related to each
other. Relationships end up expressed as links in the output (with each participant
in a relationship having links to the other participants).&lt;/section></codeph></p></stepxmp>
<info><p>Keep information like this to a minimum in reference topics. You
can always link to a concept for more in-depth information, for example to
concepts about maps, collections, and references.</p></info></step>
</steps>
</taskbody>
</task>
<task id="properties">
<title>Adding properties</title>
<shortdesc>Describe the attributes of the element, using a properties table.
If we were providing more information about each attribute, we could also
choose to document them in their own reference topics, nested after the &lt;refbody>
as children of the current reference topic.</shortdesc>
<taskbody>
<context>Properties can be used for any case where the reference subject has
a list of attributes, states, settings or the equivalent that can be adequately
described in a table format. Generic tables are also available, when you need
to talk about content that isn't just properties of the subject element. Child
reference topics are an appropriate replacement for &lt;properties> if the
content is too substantial to be readable in a table.</context>
<steps>
<step><cmd>Add a &lt;properties> element after the section.</cmd><info>The &lt;properties>
element will be formatted as a table on output.</info></step>
<step><cmd>Add a &lt;property> element.</cmd><info>Each &lt;property> element
will become a row on output. Each property can have a type (first column),
value (second column), and description (third column). </info></step>
<step><cmd>Within the property, add a type, value, and description for collection-type="sequence".</cmd>
<stepxmp><codeblock>&lt;property>
  &lt;proptype>collection-type&lt;/proptype>
  &lt;propvalue>sequence&lt;/propvalue>
  &lt;propdesc>Child topics will get next and previous links to the topics 
  immediately before and after them in the sequence. They will also link 
  to any preceding siblings with importance="required".&lt;/propdesc>
&lt;/property></codeblock></stepxmp></step>
<step importance="optional" rev="dita13"><cmd>By default, property tables
have a heading with automatically generated text.</cmd><info>If you want your
own text for the table heading, add a &lt;prophead> element after the properties
element. Within the prophead, add heading for the type, value, or description
as appropriate.</info></step>
<step><cmd>Add a second property, with value and description for collection-type="family'.</cmd>
<info>You can omit the &lt;proptype> element. It's assumed to be <codeph>collection-type</codeph>,
since that's the value in the last &lt;proptype> defined.</info><stepxmp><codeblock>&lt;property>
  &lt;propvalue>family&lt;/propvalue>
  &lt;propdesc>Child topics will get links to all siblings.&lt;/propdesc>
&lt;/property></codeblock></stepxmp></step>
<step><cmd>Add a third for unordered and choice.</cmd><stepxmp><codeblock>&lt;property>
  &lt;propvalue>unordered, choice&lt;/propvalue>
  &lt;propdesc>Child topics don't link to each other.&lt;/propdesc>
&lt;/property></codeblock></stepxmp></step>
</steps>
<result>If this were a real reference topic for the topicref element, there
would be a property for each of its attributes. For this tutorial, the properties
for the collection types are enough to demonstrate how properties work.</result>
</taskbody>
</task>
<task id="examples">
<title>Adding examples</title>
<shortdesc>Add examples to show how the element is used in practice.</shortdesc>
<taskbody>
<steps>
<step><cmd>Add an &lt;example> element after the properties.</cmd></step>
<step><cmd>Add a &lt;title> ("Examples") and a &lt;codeblock> to the example.</cmd>
</step>
<step><cmd>Add some examples of topicref elements, showing different combinations
of attributes.</cmd><info>If you type &lt; in the editor, it will automatically
turn them into entities instead, so that they don't get treated as XML markup.</info>
</step>
</steps>
<result>The result should look something like this. The &amp;lt; is the entity
equivalent of &lt; .<codeblock>&lt;example>&lt;title>Examples&lt;/title>
  &lt;codeblock>
&amp;lt;topicref navtitle="Creating maps" href="tasks/create.dita" 
      collection-type="ordered">
  &amp;lt;topicref navtitle="Getting started" href="tasks/getstart.dita">
    &amp;lt;topicref navtitle="Tutorial: Creating a simple map" 
        href="tasks/tutcreatemap.dita"/>
    &amp;lt;topicref navtitle="Sample: A simple map" href="samples/simplesamp.zip" 
        format="zip"/>
  &amp;lt;/topicref>
&amp;lt;/topicref>
  &lt;/codeblock> 
&lt;/example>
</codeblock></result>
</taskbody>
</task>
<task id="preview">
<title>Previewing results</title>
<shortdesc>Generate HTML and PDF for the reference topic, and see what the
result looks like.</shortdesc>
<taskbody>
<context>The properties are displayed as a table, with blank cells added as
necessary to keep the columns lined up.</context>
</taskbody>
</task>
<concept id="sum">
<title>Summary</title>
<shortdesc>You have created a reference topic, including a syntax section,
a description of purpose, a set of properties, and some examples.</shortdesc>
<conbody></conbody>
</concept>
</task>
</dita>
