<?xml version="1.0" encoding="utf-8"?>
<!-- (c) Copyright IBM Corp. 2004, 2006 All Rights Reserved. -->
<!DOCTYPE dita PUBLIC "-//IBM//DTD DITA Composite//EN"
 "..\dtd\ditabase.dtd">
<dita>
<task id="tuttopic" xml:lang="en-us">
<title>Tutorial: Creating links to topics</title>
<shortdesc>Learn how to create cross-references and links to Dita topics,
web pages, PDFs, and more.</shortdesc>
<prolog><metadata>
<keywords><indexterm>topics<indexterm>link tutorial</indexterm></indexterm>
<indexterm>link tutorial</indexterm><indexterm>cross-reference tutorial</indexterm>
</keywords>
</metadata></prolog>
<taskbody>
<context>Cross-references and links Topics are a generic kind of content,
unlike concepts, tasks, and reference information, which have an associated
information type. You should only author content as a generic topic when it
genuinely isn't appropriate for one of the supported information types. For
this tutorial, however, we will use the generic topic to introduce some structures
and markup that are common to all the information types.</context>
<result>After you complete the tutorial, you will know:<ul>
<li>How to create cross-references within the body of a topic</li>
<li>How to create links after the body of the document</li>
<li>How to create links to other DITA topics, to HTML files, to PDF documents,
and to other files.</li>
</ul></result>
</taskbody>
<task id="addingcross-referencelinks" xml:lang="en-us">
<title>Adding cross-reference links</title>
<shortdesc>Cross-reference links allow you to create links in the content
of your topic. For example, in lists, in sentences, or in tables.</shortdesc>
<taskbody>
<context>For this tutorial, use the file named <filepath>c:\tut-content\topics\simpletopic.dita</filepath>.</context>
<steps>
<step><cmd>Open the file <filepath>c:\tut-content\topics\simpletopic.dita</filepath></cmd>
</step>
<step><cmd>Create a paragraph, enter <codeph>Some cross-references:</codeph> into
it. Add an unordered list with three list items. </cmd><stepxmp>You should
have added something like this:<codeblock>&lt;p>Some cross-references:
 &lt;ul>
  &lt;li>&lt;/li>
  &lt;li>&lt;/li>
  &lt;li>&lt;/li>
 &lt;/ul>
&lt;/p></codeblock></stepxmp></step>
<step><cmd>This will create a link to a DITA topic:</cmd>
<substeps>
<substep><cmd>Inside the first list item, type something like <codeph>See:</codeph> and
add an Xref element.</cmd><info>The Xref element allows you to create links
almost anywhere in your content.</info></substep>
<substep><cmd>Update the attribute to the Xref element. Set the Href attribute
to this; it will add a link to your sample task DITA file:<codeph>../tasks/addnon.dita</codeph></cmd>
<info>The <codeph>../</codeph> bounces you back one directory (into <filepath>tut-content</filepath>).</info>
<stepxmp>Your markup should be like this:<codeblock>&lt;p>Some cross-references:
 &lt;ul>
  &lt;li>See: &lt;xref href="../tasks/addnon.dita"/>&lt;/li>
  &lt;li>&lt;/li>
  &lt;li>&lt;/li>
 &lt;/ul>
&lt;/p></codeblock></stepxmp><info><p>The Xref element can contain content.
If there is content, that is used for the link text. When a cross-reference
is to a Dita topic, the title of that topic is used as the link text. When
a cross-reference is made to something that is not Dita, and there is no Xref
content, the Href value is used for the link title</p></info></substep>
</substeps>
</step>
<step><cmd>Now to create a link to an HTML web page:</cmd>
<substeps>
<substep><cmd>Inside the next list item, type something like <codeph>Look
for IBM at:</codeph> and add an Xref element.</cmd></substep>
<substep><cmd>Update the attribute to the Xref element. Set the Href attribute
to this; it will add a link to IBM's main web page:<codeph>http://www.ibm.com</codeph></cmd>
<info>Set the Format attribute to <q>html</q>; set the Scope attribute to <q>external</q>.
Scope can also be set to local or peer. In this case, the external setting
causes the link to appear in a new browser window, because the link is to
external content from your information.</info><stepxmp>Your markup should
be like this:<codeblock>&lt;li>Look for IBM at: &lt;xref href="http://www.ibm.com" 
    format="html" scope="external">&lt;/xref>&lt;/li></codeblock></stepxmp>
</substep>
</substeps>
</step>
<step><cmd>Now to create a link to a PDF document:</cmd>
<substeps>
<substep><cmd>Inside the next list item, type something like <codeph>Read
all about it: </codeph> and add an Xref element.</cmd></substep>
<substep><cmd>Update the attribute to the Xref element. Set the Href attribute
to this; it will add a link to the PDF version of this book: <codeph>http://w3.rchland.ibm.com/projects/IDWB/documents/ditaguide.pdf</codeph></cmd>
<info>Set the Format attribute to <q>pdf</q></info><stepxmp>Your markup should
be like this:<codeblock>&lt;li>Read all about it: 
   &lt;xref href="http://w3.rchland.ibm.com/projects/IDWB/documents/ditaguide.pdf" 
    format="pdf">&lt;/xref>&lt;/li></codeblock></stepxmp></substep>
</substeps>
</step>
</steps>
</taskbody>
</task>
<task id="rellinks">
<title>Adding related links</title>
<shortdesc>You can manage related links either manually in the topic, or by
using maps to automatically insert the links based on relationships. For this
tutorial, add links to the topic after the body. Use the role attribute to
show how the target relates to the current topic, and use the scope attribute
to tell the output process whether the target is part of the same component
or information set.</shortdesc>
<taskbody>
<context>Wherever possible, you should manage your links from maps, so that
the topic has few direct dependencies on other topics, and can easily be reused
in other collections. However, if your topic is only being used in one collection,
the links are unlikely to change in different contexts, or the links are to
topics in the same file, you can add the links directly to the topic.</context>
<steps>
<step><cmd>After the body, insert a &lt;related-links> element.</cmd><info>This
element organizes your related links, and can also be used to set default
attributes for all of them, such as type, scope, or role.</info></step>
<step><cmd>Within the &lt;related-links> element, add a &lt;link> to href="simple.dita"
with role="next".</cmd><info>In a map, you would achieve the same effect by
putting this topic and the next in a sequence. All topics in a sequence get
next and previous links based on their position in the sequence.</info></step>
<step><cmd>After the "next" link, add links to child1.dita and child2.dita,
with role="child".</cmd><info>If you had more links with the same role, you
could put them all in a &lt;linkpool> with role="child", instead of setting
the attribute on each of them individually.</info><info>In a map, you would
create the same effect by nesting the children under the current topic.</info>
</step>
<step><cmd>After the child links, add a link to peerref.dita: </cmd>
<substeps>
<substep><cmd>Set scope="peer"</cmd></substep>
<substep><cmd>Inside the link, add a &lt;linktext> element with the content <userinput>A
peer link</userinput>.</cmd></substep>
<substep><cmd>After the &lt;linktext>, add a &lt;desc> element with the content <userinput>This
is a short description.</userinput></cmd></substep>
</substeps>
<info>By setting scope="peer", you indicate that the target will be available
when the output is read by the user, but is not available at processing or
build time. Because it isn't available at build time, you need to define the
&lt;linktext> and &lt;desc>, since they can't be simply copied from the target's
&lt;title> and &lt;shortdesc>.</info></step>
<step><cmd>After the peer reference, add a link to http://www.ibm.com:</cmd>
<substeps>
<substep><cmd>Set scope="external"</cmd></substep>
<substep><cmd>Add &lt;linktext>: <userinput>IBM's Web site</userinput></cmd>
</substep>
<substep><cmd>Add a &lt;desc>: <userinput>This is an external link to IBM's
Web site.</userinput></cmd></substep>
</substeps>
<info>By setting scope="external", you indicate that the target is outside
of the information set. The build process will not attempt to reach the target,
and when the user clicks on the link it will open in a new window, to help
the user recognize that they have left the current information set.</info>
</step>
<step><cmd>After the external reference, add another peer reference, to readme.htm:</cmd>
<substeps>
<substep><cmd>Set scope="peer"</cmd></substep>
<substep><cmd>Set format="html"</cmd></substep>
<substep><cmd>Add a &lt;desc>: <userinput>The readme file, with late-breaking
information</userinput></cmd></substep>
</substeps>
<info>By setting the <i>format</i> to html, you tell processes that the file
cannot be opened and interpreted, although in this case the scope="peer" accomplishes
the same thing. But the <i>format</i> attribute also tells processes not to
change the file extension, as it would for a link to a DITA file.</info></step>
</steps>
<postreq>For the local links (those without a scope attribute), the targets
need to be somewhere the output process can reach them. You can copy the target
topics from the simple map sample, or if you have already done the simple
map tutorial, you can adjust the hrefs in the links to point to their current
location.</postreq>
</taskbody>
</task>
<task id="reprev">
<title>Previewing results</title>
<shortdesc>Once you have copied the target topics into the current directory,
or adjusted the hrefs to point to their existing directory, you can preview
the results again in PDF and HTML.</shortdesc>
<taskbody>
<steps>
<step><cmd>Generate the PDF, and see which links are preserved and which are
ignored.</cmd></step>
<step><cmd>Generate the XHTML, and see how the links are formatted, and what
happens when you click on them.</cmd></step>
</steps>
</taskbody>
</task>
<concept id="summary">
<title>Summary</title>
<shortdesc>You have created a simple topic, and seen how sections contain
blocks that contain phrases that contain keywords that contain text. Simply
put, big structures can contain smaller structures, but not vice versa. You
have seen how to define related links in a topic, how they compare with related
links managed with a map, and when each approach is suitable.</shortdesc>
<conbody>
<p>You have also seen how the different kinds of markup can be divided up
into categories based on subject area, such as programming and user interfaces,
and how link behavior is affected by the scope, role, and format attributes.</p>
<p>You are now ready to begin creating more specific information types, where
you will encounter additional kinds of markup and more restrictive rules on
how you author them.</p>
</conbody>
</concept>
</task>
</dita>
