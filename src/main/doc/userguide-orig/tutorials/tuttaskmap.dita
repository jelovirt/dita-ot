<?xml version="1.0" encoding="utf-8"?>
<!-- (c) Copyright IBM Corp. 2004, 2006 All Rights Reserved. -->
<!DOCTYPE dita PUBLIC "-//IBM//DTD DITA Composite//EN"
 "..\dtd\ditabase.dtd">
<dita>
<task id="tuttaskmap" xml:lang="en-us">
<title>Tutorial: Creating a task hierarchy</title>
<shortdesc>Learn how to create a simple task hierarchy, including task overviews,
sequences, and prerequisites, based on a user scenario.</shortdesc>
<prolog><metadata>
<keywords><indexterm>task hierarchies<indexterm>tutorial</indexterm></indexterm>
</keywords>
</metadata></prolog>
<taskbody>
<prereq>This tutorial builds on basic map principles introduced in <xref href="tutcreatemap.dita"></xref>.
You should be familiar with those principles before attempting this tutorial.</prereq>
<context>Tasks answer the question "How do I...". When you create a task hierarchy,
you need to start by making sure you have a good foundation: a scenario or
sample that you can apply task analysis to.</context>
<result>At the end of this tutorial, you will know:<ul>
<li>What task analysis is</li>
<li>How to get a task list out of a usage scenario</li>
<li>When to define families and sequences</li>
<li>How to identify prerequisites</li>
</ul></result>
</taskbody>
<concept id="taskhier" conref="../concepts/taskhier.dita#taskhier">
<title>Task hierarchies</title>
<conbody></conbody>
</concept>
<concept id="taskan" conref="../concepts/taskan.dita#taskan">
<title>Task analysis</title>
<conbody></conbody>
</concept>
<concept id="scenarios" conref="../concepts/scenarios.dita#scenarios">
<title>Scenarios</title>
<conbody></conbody>
</concept>
<task id="scenario">
<title>Defining a scenario and listing its tasks</title>
<shortdesc>Define a scenario, based on a use case or sample, that demonstrates
the features of the product you need to document, and use it to create a task
list.</shortdesc>
<taskbody>
<context><p>For this tutorial, we'll use the last tutorial as a user scenario.</p></context>
<steps>
<step><cmd>Find the sample or use case you want to start with.</cmd><tutorialinfo>For
this tutorial, use the last tutorial as a starting point. Think of it as a
use case that defines a set of interactions, and think of its end-product
- a simple map - as a sample.</tutorialinfo><info>Typically you'll need quite
a few use cases or samples to cover the full set of features you need to document
for a product. However, a single component of a product may only require two
or three use cases.</info></step>
<step><cmd>Identify the roles involved in the use case.</cmd><tutorialinfo>In
this case, there is really just one role: the information architect. However,
in the larger task of creating a help Web or information center, there are
multiple roles.</tutorialinfo><info>Typically you will want to break your
scenarios up so that whenever possible they concentrate on just one role,
though high-level scenarios will often involve more than one role.</info>
</step>
<step><cmd>Identify the tasks involved in the use case, for each role that
you are documenting.</cmd><info>This is different from a straight listing
of all the actions in the use case. Each task will likely consist of several
actions.. Some of the actions may be performed by systems, or by other roles,
and so shouldn't be documented in tasks. </info><tutorialinfo>For example,
during map processing, there are a lot of steps involved in calculating links
to be added to the output: generating intermediate files, and so on. A use
case for map processing would list these steps. But since the steps are performed
by the process, not by the information architect, the steps don't need to
be documented.</tutorialinfo></step>
</steps>
<result>You should now have something that looks quite a bit like the outline
for the last tutorial, listing only task headings:<ul>
<li>Starting a map</li>
<li>Adding a simple topic reference</li>
<li>Nesting topic references</li>
<li>Defining a sequence</li>
<li>Defining a family</li>
<li>Creating topics</li>
<li>Generating HTMLHelp</li>
<li>Generating an Eclipse plugin</li>
<li>Reviewing HTML output</li>
<li>Generating a PDF</li>
<li>Overriding titles</li>
<li>Reviewing overrides</li>
<li>Adding an external reference</li>
<li>Adding a peer topic</li>
<li>Adding a non-DITA reference</li>
<li>Reviewing scoped references</li>
</ul></result>
</taskbody>
</task>
<task id="startmap">
<title>Starting the task map</title>
<shortdesc>You can use the task map to organize your list of tasks..</shortdesc>
<taskbody>
<context>You can use task overviews to organize higher-level tasks, and to
split up long sequences or lists of tasks into more manageable sets. For each
set of tasks defined under a task overview, you can define whether the child
tasks are sequential or not. At the highest level, you can define common attributes
for the hierarchy, such as audience.</context>
<steps>
<step><cmd>Create the directory tut-maps\ to hold the map.</cmd></step>
<step><cmd>Create a map named tut-maps\tasks.ditamap .</cmd></step>
<step><cmd>On the &lt;map> element, set the following attributes:</cmd>
<substeps>
<substep><cmd>Set <i>title</i> to <userinput>Task map</userinput></cmd></substep>
<substep><cmd>Set <i>audience</i> to <userinput>infoarch</userinput>.</cmd>
<info>The audience attribute can hold more than one value, to indicate when
there is more than one audience for a particular set of information. Since
the values are space-delimited, each audience value must be a single word
without spaces.</info></substep>
</substeps>
</step>
</steps>
</taskbody>
</task>
<task id="addtasks">
<title>Creating the task hierarchy</title>
<shortdesc>Now that you've defined the map, you can add the tasks, organized
into major tasks and subtasks.</shortdesc>
<taskbody>
<context>The task hierarchy isn't necessarily in the same order as the task
list. The task list shows only a single sequence of actions, while the task
hierarchy can show more complex organizations. For example, you can organize
the tasks for adding different kinds of topic reference under a single overview
task for adding topic references in general. Also, some tasks are not worth
documenting separately: nesting a topic reference can be adequately covered
within the topic reference tasks.</context>
<steps>
<step><cmd>Add the tasks as follows:</cmd><stepxmp><codeblock>&lt;map title="<b>Task map</b>" audience="<b>infoarch</b>">
  &lt;topicref navtitle="<b>Creating maps</b>">
    &lt;topicref navtitle="<b>Starting maps</b>"/>
    &lt;topicref navtitle="<b>Adding topic references</b>">
      &lt;topicref navtitle="<b>Adding simple references</b>"/>
      &lt;topicref navtitle="<b>Adding external references</b>"/>
      &lt;topicref navtitle="<b>Adding peer references</b>"/>
      &lt;topicref navtitle="<b>Adding non-DITA references</b>"/>
      &lt;topicref navtitle="<b>Overriding titles and descriptions</b>"/>
    &lt;/topicref>
    &lt;topicref navtitle="<b>Defining collection types</b>">
      &lt;topicref navtitle="<b>Defining sequences</b>"/>
      &lt;topicref navtitle="<b>Defining families</b>"/>
    &lt;/topicref>
    &lt;topicref navtitle="<b>Producing output</b>">
      &lt;topicref navtitle="<b>Generating HTMLHelp</b>"/>
      &lt;topicref navtitle="<b>Generating Eclipse plugins</b>"/>
      &lt;topicref navtitle="<b>Generating PDF</b>"/>
    &lt;/topicref>
  &lt;/topicref>
&lt;/map></codeblock><p>If you are reading this online, you can cut and paste
the above directly into your editor. You can also copy from the sample/typedmaps/source/tasks.ditamap
sample, although it will also contain information from further on in this
tutorial.</p></stepxmp><info>All the reviewing tasks are collapsed into a
single set of tasks for producing output. While reviewing is an important
part of learning, users probably don't want to continue producing output every
time they define a collection type after they've grasped the concept.</info>
</step>
</steps>
</taskbody>
</task>
<task id="addscen">
<title>Adding the scenario</title>
<shortdesc>In addition to the task flow you derived, you can add the scenario
itself, either in the form of a tutorial, a description of the scenario, a
sample set, or some combination.</shortdesc>
<taskbody>
<context>In this case, since we already have a tutorial and a sample, add
those to a "Getting started" section. The sample needs to be defined as non-DITA
content, since it won't be processed into the output, although it will be
copied to the output directory. You should also set the &lt;topicref> as toc="no",
so that it doesn't get included in the output navigation. It will still be
available as links from neighboring topics. A better solution would probably
be to create a DITA topic that provides a description and link to the sample,
and then reference the DITA topic rather than referencing the sample directly.
But for this tutorial, we'll include the non-DITA reference in the map directly.</context>
<result>The result should look something like this:<codeblock>&lt;map title="Task map" audience="infoarch">
  &lt;topicref navtitle="Creating maps">
    &lt;topicref navtitle="<b>Getting started</b>">
      &lt;topicref navtitle="<b>Tutorial: Creating a simple map</b>"/>
      &lt;topicref navtitle="<b>Sample: A simple map</b>" format="<b>zip</b> toc="<b>no</b>"/>
    &lt;/topicref>
    &lt;topicref navtitle="Starting maps"/>
    &lt;topicref navtitle="Adding topic references">
      ...
    &lt;/topicref>
    &lt;topicref navtitle="Defining collection types">
      ...
    &lt;/topicref>
    &lt;topicref navtitle="Producing output">
      ...
    &lt;/topicref>
  &lt;/topicref>
&lt;/map></codeblock></result>
</taskbody>
</task>
<task id="addfam">
<title>Defining families</title>
<shortdesc>When siblings are closely related, you can make them link to each
other by identifying them as a family.</shortdesc>
<taskbody>
<context>The tutorial and sample, for example, are closely related. And while
the map can't add links to the sample (since the sample isn't a DITA topic),
it will add a link from the tutorial to the sample, if we identify them as
children in a family:</context>
<steps>
<step><cmd>Define the family by setting the <i>collection-type</i> attribute
on "Getting started".</cmd><stepxmp><codeblock>&lt;map title="Task map" audience="infoarch">
  &lt;topicref navtitle="Creating maps">
    &lt;topicref navtitle="Getting started" <b>collection-type="family"</b>>
      &lt;topicref navtitle="Tutorial: Creating a simple map"/>
      &lt;topicref navtitle="Sample: A simple map" format="zip" toc="no"/>
    &lt;/topicref>
    ...
  &lt;/topicref>
&lt;/map></codeblock></stepxmp></step>
</steps>
</taskbody>
</task>
<task id="addsequence">
<title>Defining sequences</title>
<shortdesc>Once you've defined the hierarchy, you can define which parts of
it are sequential.</shortdesc>
<taskbody>
<context>Not all the tasks in the hierarchy need to be performed in sequence.
For example, the different kinds of reference could be added in any order,
and there's no need to generate HTMLHelp before generating a PDF. These kinds
of tasks are related only in terms of their common parent, and don't need
next and previous links. In fact, in this task hierarchy, there is really
only one sequence: the sequence of main tasks directly under Creating maps. </context>
<steps>
<step><cmd>Define the sequence by setting the <i>collection-type</i> attribute
on "Creating maps":</cmd><stepxmp><codeblock>&lt;map title="Task map" audience="infoarch">
  &lt;topicref navtitle="Creating maps" <b>collection-type="sequence</b>">
    &lt;topicref navtitle="Getting started" collection-type="family">
    ...
    &lt;/topicref>
    &lt;topicref navtitle="Starting maps"/>
    &lt;topicref navtitle="Adding topic references">
      ...
    &lt;/topicref>
    &lt;topicref navtitle="Defining collection types">
      ...
    &lt;/topicref>
    &lt;topicref navtitle="Producing output">
      ...
    &lt;/topicref>
  &lt;/topicref>
&lt;/map></codeblock></stepxmp><info><p>This means that "Starting maps" will
link to "Adding topic references", which will link back to it and forward
to "Nesting topic references", and so on. So the sequence of these major tasks
is supported and expressed by links, while the merely descriptive grouping
of tasks under "Producing output" are not linked to each other, except indirectly
through their common parent.</p></info></step>
</steps>
</taskbody>
</task>
<task id="prereqs">
<title>Identifying prerequisites</title>
<shortdesc>Once you have identified sequences, you can identify what components
of the sequence are required, which can be used to identify prerequisites.</shortdesc>
<taskbody>
<context>When you define an overview task, such as "Creating maps", some of
its subtasks may be required to achieve the high-level goal, while others
may be optional. In this example, "Starting maps", which describes how to
create a map file, is clearly required; and so is "Adding topic references",
since maps don't make much sense without them. But "Nesting topic references"
isn't strictly necessary, nor is "Defining collection-types".</context>
<steps>
<step><cmd>Set the <i>importance</i> attribute on "Starting maps" to required.</cmd>
</step>
<step><cmd>Do the same for "Adding topic references".</cmd></step>
</steps>
<result>The result should look something like this:<codeblock>&lt;map title="Task map" audience="infoarch">
  &lt;topicref navtitle="Creating maps" collection-type="sequence">
    ...
    &lt;topicref navtitle="Starting maps" <b>importance="required"</b>/>
    &lt;topicref navtitle="Adding topic references" <b>importance="required"</b>>
      ...
    &lt;/topicref>
    &lt;topicref navtitle="Defining collection types">
      ...
    &lt;/topicref>
    &lt;topicref navtitle="Producing output">
      ...
    &lt;/topicref>
  &lt;/topicref>
&lt;/map></codeblock><p>Because these tasks are marked as required, later
tasks in the same sequence will now link to them as prerequisites. So, for
example, "Producing output" will have two links in a prerequisites section,
one to "Starting maps" and one to "Adding topic references". This correctly
reflects the fact that you must create a map and add topic references before
you can define collection types.</p><p>Not every prerequisite can be identified
this way; for example, while you need to install and configure IDWB before
you can produce PDF output from maps, the installation and configuration tasks
won't necessarily be part of the same sequence or even map as the producing
PDF task. You can overcome this by using other methods of identifying prerequisites,
including relationship tables, which are covered in a later tutorial.</p></result>
</taskbody>
</task>
<task id="addcontent">
<title>Adding content</title>
<shortdesc>Now that you've mapped the hierarchy, with sequences and prerequisites,
you can add references to the content it describes.</shortdesc>
<taskbody>
<context>By defining the task hierarchy, you've defined what tasks need to
be created. For this tutorial, we'll use pre-existing content. When you create
your own task hierarchies, you'll likely use a mix of pre-existing and new
content.</context>
<steps>
<step><cmd>Within the tutmaps directory, create a tasks subdirectory.</cmd>
</step>
<step><cmd>Copy the tasks from sample\typedmaps\source\tasks into the tutmaps\tasks
directory.</cmd></step>
<step><cmd>Add <i>href</i> attributes to your map that point to the directory.</cmd>
<stepxmp>For example, &lt;topicref navtitle="Adding topic references"/> becomes
&lt;topicref href="tasks/addtopicrefs.dita" navtitle="Adding topic references"/>.</stepxmp>
</step>
<step><cmd>Open a few of the task files, and confirm that they do not contain
related links.</cmd><tutorialinfo>There is another tutorial for creating task
content. For this tutorial, we're only interested in how the map manages the
related links.</tutorialinfo></step>
</steps>
<result>Your map should now look like this:<codeblock>&lt;map title="Task map">
  &lt;topicref navtitle="Creating maps" href="tasks/create.dita" collection-type="sequence">
    &lt;topicref navtitle="Getting started" href="tasks/getstart.dita">&lt;?Pub Caret?>
      &lt;topicref navtitle="Tutorial: Creating a simple map" href="tasks/tutcreatemap.dita"/>
      &lt;topicref navtitle="Sample: A simple map" href="samples/simplesamp.zip" 
				format="zip" toc="no"/>
    &lt;/topicref>
    &lt;topicref navtitle="Starting maps" href="tasks/start.dita"/>
    &lt;topicref navtitle="Adding topic references" href="tasks/addref.dita">
      &lt;topicref navtitle="Adding simple references" href="tasks/addsimp.dita"/>
      &lt;topicref navtitle="Adding external references" href="tasks/addext.dita"/>
      &lt;topicref navtitle="Adding peer references" href="tasks/addpeer.dita"/>
      &lt;topicref navtitle="Adding non-DITA references" href="tasks/addnon.dita"/>
      &lt;topicref navtitle="Overriding titles and descriptions" href="tasks/override.dita"/>
    &lt;/topicref>
    &lt;topicref navtitle="Defining collection types" href="tasks/definecoll.dita">
      &lt;topicref navtitle="Defining sequences" href="tasks/defseq.dita"/>
      &lt;topicref navtitle="Defining families" href="tasks/deffam.dita"/>
    &lt;/topicref>
    &lt;topicref navtitle="Producing output" href="tasks/prodout.dita">
      &lt;topicref navtitle="Generating HTMLHelp" href="tasks/genhelp.dita"/>
      &lt;topicref navtitle="Generating Eclipse plugins" href="tasks/geneclipse.dita"/>
      &lt;topicref navtitle="Generating PDFs" href="tasks/genpdf.dita"/>
    &lt;/topicref>
  &lt;/topicref>
&lt;/map></codeblock></result>
</taskbody>
</task>
<task id="genstuff">
<title>Generating output</title>
<shortdesc>Generate the output for the map.</shortdesc>
<taskbody>
<context>Use the same procedure as for the simple map, and generate either
HTMLHelp or an Eclipse plugin.</context>
</taskbody>
</task>
<task id="reviewresults">
<title>Reviewing results</title>
<shortdesc>Review the results of the map, including navigation and related
links.</shortdesc>
<taskbody>
<steps>
<step><cmd>Check that parent and child links have been added.</cmd><info>The
child links also show the link description after each link. In other kinds
of link, the link description is only available if you hover over the link
in some browsers. The child links in "Creating maps" are numbered, because
they are defined in a sequence.</info></step>
<step><cmd>Check that next and previous links have been added to tasks in
a sequence..</cmd></step>
<step><cmd>Check that prerequisite links have been added to tasks in a sequence
when an earlier task is required.</cmd></step>
<step><cmd>Compare the results with the equivalent set of tasks in the sample
output. You should see some additional links in the DITA information set,
because it covers more content and relationshps. But you should be able to
see some similarities as well. This is the same content being used with different
maps to produce different sets of links.</cmd></step>
</steps>
</taskbody>
</task>
<concept id="summary">
<title>Summary</title>
<shortdesc>You have created a task hierarchy, starting from a scenario that
helps you identify tasks, and then organizing them into a hierarchy with sequences
and families of siblings.</shortdesc>
<conbody>
<p>You have seen how the hierarchy affects linking, including next, previous,
and prerequisite links. You have seen how the task hierarchy reflects the
flow of tasks in the original scenario, and reviewed how tasks can be derived
from use cases, scenarios, tutorials, or samples through task analyses.</p>
<p>Compare your map to the sample map in samples\typedmaps\source, and compare
your output to the sample output in samples\typedmaps\output</p>
<p>You are now ready to proceed to the next tutorial, where you'll learn how
to create a hierarchy of concepts that support the tasks we defined here..</p>
</conbody>
</concept>
</task>
</dita>
