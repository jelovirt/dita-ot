<?xml version="1.0" encoding="utf-8"?>
<!-- (c) Copyright IBM Corp. 2004, 2006 All Rights Reserved. -->
<!DOCTYPE dita PUBLIC "-//IBM//DTD DITA Composite//EN"
 "..\dtd\ditabase.dtd">
<dita>
<task id="tuttasktopic" xml:lang="en-us">
<title>Tutorial: Creating a task topic</title>
<shortdesc>Learn how to create a task, including the definition of different
kinds of steps and substeps, and the definition of information before and
after the task.</shortdesc>
<prolog><metadata>
<keywords><indexterm>tasks<indexterm>tutorial</indexterm></indexterm></keywords>
</metadata></prolog>
<taskbody>
<context><p>For this tutorial, we'll walk through the creation of a map-related
task from the map set of tutorials: how to create a non-DITA reference in
a map.</p></context>
<result>After completing this tutorial you will know:<ul>
<li>The main parts of a task, from prerequisites and context to examples and
post-task requirements</li>
<li>The structure of a step list, including substeps, choices, and choice
tables</li>
<li>The structure of a step, from the command to the step result</li>
<li>The reason for all that structure</li>
</ul></result>
</taskbody>
<concept id="tasktopic" conref="../concepts/tasktopic.dita#tasktopic">
<title>Task topics</title>
<conbody></conbody>
</concept>
<task id="prepdir" conref="tuttopic.dita#prepdir">
<title>Preparing a project directory</title>
<taskbody></taskbody>
</task>
<task id="starttask">
<title>Starting the task</title>
<shortdesc>Tasks are created using the task document type, which imposes a
very specific structure on tasks.</shortdesc>
<taskbody>
<steps>
<step><cmd>Start your editor.</cmd></step>
<step><cmd>Start a new task topic.</cmd></step>
<step><cmd>Change the <i>title</i> to <userinput>Adding non-DITA references</userinput>.</cmd>
<info>Begin task headings with the present participle form of a verb: "Creating
a window," "Deleting a class."  Try to maintain a verb-object structure. Use
a plural object whenever that makes sense: "Printing files," "Starting the
server."  The heading of the task should describe the user's view of the task,
not the tool used to perform it. </info><stepxmp>In this case, for example,
the title "Using the format attribute" would not be appropriate, since that's
focusing on the technology instead of focusing on the user goal</stepxmp>
</step>
<step><cmd>Change the <i>id</i> to <userinput>nondita</userinput>.</cmd></step>
<step><cmd>Save the task as <filepath>tut-content/tasks/addnon.dita</filepath>.</cmd>
</step>
<step><cmd>Delete all the content of the body, and leave just an empty &lt;taskbody>
element.</cmd></step>
<step><cmd>Insert a short description: <userinput>You can create references
to non-DITA content using the format attribute.</userinput></cmd><info>As
introduced earlier, the short description needs to make sense on its own as
a preview of the task, as well as serving as a short introduction before getting
into the rest of the task.</info></step>
</steps>
</taskbody>
</task>
<task id="prereqs">
<title>Describing prerequisites and context</title>
<shortdesc>Use the &lt;prereq> section to describe entry criteria for the
task: what users need to have done, or what they need installed, before they
start the task. Use the &lt;context> section to help the user decide whether
they want to do the task, by providing some background information, and to
introduce the actual steps.</shortdesc>
<taskbody>
<context><p></p></context>
<steps>
<step><cmd>In the &lt;taskbody> element, insert a &lt;prereq> element.</cmd>
<stepxmp><codeblock>&lt;prereq>
  Before you can add a non-DITA reference, you must have a map open.
&lt;/prereq></codeblock></stepxmp><info>This is a trivial prerequisite, and
we are only adding it to show off the section.</info><info>If you want to
provide links to prerequisite tasks, you can add the link at the end of the
task, and set importance="required" to identify the link as a prerequisite.
The link will then show up in the prerequisites section on output. As with
all links, however, you can also manage them using a map instead of storing
them in the individual topics.</info></step>
<step><cmd>After the &lt;prereq> section, add a &lt;context> element.</cmd>
<stepxmp><codeblock>&lt;context>
Use non-DITA references when you are linking to PDFs or HTML files 
that are part of your Web, or when you are linking outside your Web to 
external HTML Web sites. Use the format attribute to say what kind of 
content you're linking to, and use the scope attribute to indicate 
whether the reference is to local or external content.
&lt;/context></codeblock></stepxmp><info>Some amount of conceptual information
is appropriate here, but do not repeat entire concepts. When the context balloons
to more than one or two paragraphs, consider chunking the information out
into a separate concept file and linking to it.</info><info>The context section,
like the prerequisites, is optional. If you can get away with just a short
description, do so.</info></step>
</steps>
</taskbody>
</task>
<task id="steps">
<title>Adding steps</title>
<shortdesc>Steps are the most important part of the task. They tell the user
what to do, and what order to do it in.</shortdesc>
<taskbody>
<context><p>A task with multiple sequential steps is the norm. However, some
tasks don't have steps of their own, for example because they are overviews
of other tasks, or describe a negative case (they tell the user the task isn't
possible or appropriate anymore). In this case, it's okay to just use the
context, and skip the steps. In the rare case where your steps are not in
a predictable sequence, and you can't simply pick a sequence (because it could
be inappropriate for some users), you can use the <codeph>steps-unordered</codeph> element
instead of steps.</p><p>If your task has only one step, still mark it up as
a step: that way you don't need to move it around if you add more steps later.
The output will be appropriate either way: a numbered list if there are multiple
steps, or a simple paragraph if there is only one.</p><p>For this tutorial,
add steps as follows:</p></context>
<steps>
<step><cmd>After the context, add a &lt;steps> element.</cmd></step>
<step><cmd>In the &lt;steps> element, add a &lt;step>.</cmd><info>A &lt;cmd>
(command) element is added automatically, since it is required. The &lt;cmd>
is the part of the step that tells the user what to do, and it has to come
first.</info></step>
<step><cmd>Type the text for the &lt;cmd> element: <userinput>&lt;cmd>Add
a topicref element to the map.&lt;/cmd></userinput></cmd></step>
<step><cmd>Add an &lt;info> element after the &lt;cmd>.</cmd><stepxmp><codeph>&lt;info>We
still use the topicref element, even though the target may not strictly be
a topic. This keeps things simple: all referencing from a map is done with
topicrefs.&lt;/info></codeph></stepxmp><info><p>The info element is optional.
It holds additional information about the instruction.</p></info></step>
<step><cmd>Add another &lt;step>, this time including an example with the
&lt;stepxmp> element.</cmd><stepxmp><codeblock>&lt;step>
  &lt;cmd>Define the location of the target in the href attribute.&lt;/cmd>
  &lt;info>The href takes a standard URL format. 
      Typically it is a relative path to the file.
  &lt;/info>
  &lt;stepxmp>For example, href="../samples/mysamp.zip"&lt;/stepxmp></codeblock></stepxmp>
<info>All the elements in a &lt;step> will be output on the same line, unless
you include block-level elements like paragraphs in them. The &lt;cmd> element
only takes phrase-level content: if you want to include a paragraph or a list
in the &lt;cmd>, you'll need to factor it out into an &lt;info> element, or
one of the other step elements if appropriate.</info></step>
<step><cmd>Add another &lt;step>, with &lt;cmd> and &lt;info>.</cmd><stepxmp><codeblock>&lt;step>
  &lt;cmd>Provide a title for navigation purposes in the navtitle attribute.&lt;/cmd>
  &lt;info>The navtitle will also be used for linktext. The navtitle is optional for
local DITA references, since the text can be derived from the target. But
for external or non-DITA references, you must provide a navtitle, or it will
default to the href value.
  &lt;/info>
&lt;/step></codeblock></stepxmp></step>
</steps>
</taskbody>
</task>
<task id="substeps">
<title>Adding substeps</title>
<shortdesc>You can break a step down into substeps with the &lt;substeps>
element. Avoid substeps when possible by rechunking the task: substeps make
tasks harder to follow.</shortdesc>
<taskbody>
<context>Each &lt;substep> has the same structure as a normal &lt;step>, with
one key difference: it doesn't allow &lt;substeps>, &lt;choices>, or &lt;choicetables>.
This is to prevent the steps from becoming too deeply nested, which would
make them even harder for users to follow. If you have a task that requires
more than two levels of nesting (&lt;steps> and &lt;substeps>), break it up
into different tasks, and then link the tasks together, for example by defining
their sequence in a map.</context>
<steps>
<step><cmd>Add a &lt;step> with &lt;substeps>.</cmd><stepxmp><codeblock>&lt;step>&lt;cmd>Provide a link description in the desc element:&lt;/cmd>
  &lt;substeps>
    &lt;substep>
      &lt;cmd>Add a topicmeta element inside the topicref.&lt;/cmd>
    &lt;/substep>
    &lt;substep>
      &lt;cmd>Add a shortdesc element inside the topicmeta.&lt;/cmd>
    &lt;/substep>
    &lt;substep>
      &lt;cmd>Type the short description in the shortdesc element.&lt;/cmd>
    &lt;/substep>
  &lt;/substeps>
&lt;/step></codeblock></stepxmp></step>
<step><cmd>After the &lt;substeps> element, add a description of the result
of the step, using the &lt;stepresult> element.</cmd><stepxmp><codeblock>&lt;step>
  ...
  &lt;stepresult>The topicmeta, with nested shortdesc, 
    is added inside the topicref element.&lt;/stepresult>
&lt;/step></codeblock></stepxmp><info>It's a good idea to provide occasional
feedback to the user, to let them know they're on track. You can use the &lt;stepresult>
element for this, or you can put more orientation into the &lt;cmd> itself.</info>
</step>
</steps>
</taskbody>
</task>
<task id="choices">
<title>Adding choices</title>
<shortdesc>When a step has several conditions, factor them out of the &lt;cmd>
and into a &lt;choices> element. </shortdesc>
<taskbody>
<steps>
<step><cmd>Add a &lt;step> with &lt;choices>.</cmd><stepxmp><codeblock>&lt;step>&lt;cmd>Set the type of the topicref:&lt;/cmd>
  &lt;choices>
    &lt;choice>concept if the target provides conceptual information&lt;/choice>
    &lt;choice>task if it provides step-by-step instructions&lt;/choice>
    &lt;choice>reference if it provides details of a product feature&lt;/choice>
    &lt;choice>if it is none of the above, or contains a mix of the above, use topic, or
do not set the attribute.&lt;/choice>
  &lt;/choices>
  &lt;info>The type information helps the output processes sort links appropriately.&lt;/info>
&lt;/step></codeblock></stepxmp></step>
</steps>
</taskbody>
</task>
<task id="optional">
<title>Adding optional steps</title>
<shortdesc>When a step is optional, set importance="optional".</shortdesc>
<taskbody>
<context>Remember that the attribute is on the &lt;step>, not the &lt;cmd>.</context>
<steps>
<step><cmd>Add an optional step:</cmd><stepxmp><p><codeph>&lt;step importance="optional">&lt;cmd>Add
an id to the topicref, if you want to make it available for reuse by conref&lt;/cmd>&lt;/step></codeph></p></stepxmp>
</step>
</steps>
</taskbody>
</task>
<task id="choicetbl">
<title>Adding a choicetable</title>
<shortdesc>When you have a set of options to describe, like a group of checkboxes
in a user interface, you can use a &lt;choicetable> to present them in summary
form.</shortdesc>
<taskbody>
<context>For this tutorial, you can describe the values of the scope attribute
with a table, using one row to describe each value.</context>
<steps>
<step><cmd>Add a &lt;step> with the &lt;cmd> <userinput>Set the scope of the
topicref:</userinput></cmd></step>
<step><cmd>After the &lt;cmd>, add a &lt;choicetable> element, with three
&lt;chrow> elements.</cmd><info>Each &lt;chrow> element defines an option
(&lt;choption>) and its description (&lt;chdesc>).</info></step>
<step><cmd>Fill in the options and their descriptions.</cmd><stepxmp><codeblock>&lt;choicetable>
  &lt;chrow>
    &lt;choption>local&lt;/choption>
    &lt;chdesc>The topic is in the same directory 
      or a subdirectory of the map, and is available during processing.&lt;/chdesc>
  &lt;/chrow>
  &lt;chrow>
    &lt;choption>peer&lt;/choption>
    &lt;chdesc>The topic is in a different directory
      (not contained by the map's directory, is not available during processing,
      but is still part of your information set.&lt;/chdesc>
  &lt;/chrow>
  &lt;chrow>
    &lt;choption>external&lt;/choption>
    &lt;chdesc>The topic is not available during
      processing and is in a completely different information set.&lt;/chdesc>
  &lt;/chrow>
&lt;/choicetable></codeblock></stepxmp></step>
<step><cmd>Finish off the steps with one last instruction.</cmd><stepxmp><p><codeph>&lt;step>&lt;cmd>Set
the format attribute to the kind of content you're linking to.&lt;/cmd>&lt;info>Setting
it to anything except DITA tells the process that the content can't be accessed.
Setting it to PDF will also result in the link opening a new window, unless
you override it by explicitly setting scope="local" or scope="peer".&lt;/info>&lt;/step></codeph></p></stepxmp>
</step>
</steps>
</taskbody>
</task>
<task id="result">
<title>Describing task results</title>
<shortdesc>At the end of the task, include a description of the result. This
can help the user verify that they have completed the task by comparing the
description to what they see on the screen. Always put this information after
the task. If you place it in the stepresult for the final task, it could get
lost by people scanning just the commands.</shortdesc>
<taskbody>
<steps>
<step><cmd>Add a &lt;result> element after the steps:</cmd><stepxmp><p><codeph>&lt;result>You
should now have a reference to a non-DITA topic. If the reference is local,
the target will be copied to the output directory, but will otherwise be unaffected.
The reference will be ignored during PDF processing, and omitted from the
navigation but included in links for HTMLHelp processing. For Eclipse processing,
the reference will be included in both the navigation and the links.&lt;/result></codeph></p></stepxmp>
</step>
</steps>
</taskbody>
</task>
<task id="example">
<title>Providing an example</title>
<shortdesc>You can provide an example of task results, or of typical input,
at the end of the task, after the result.</shortdesc>
<taskbody>
<context>Unlike most sections in a task, the example can include a title to
set it off from the result.</context>
<steps>
<step><cmd>Add an &lt;example> after the result.</cmd></step>
<step><cmd>Within the example, add a &lt;title> element: <userinput>&lt;title>Example
non-DITA references&lt;/title></userinput></cmd></step>
<step><cmd>After the &lt;title> element, add a &lt;codeblock> with some silly
sample code.</cmd><stepxmp><codeblock>&lt;codeblock>
if (music = "the fruit of love") then 
   play on;
&lt;/codeblock></codeblock></stepxmp></step>
</steps>
</taskbody>
</task>
<task id="postreqs">
<title>Providing post-task requirements</title>
<shortdesc>As the last section of a task, you can describe anything they should
or shouldn't do, or typically would do, after the task is complete.</shortdesc>
<taskbody>
<steps>
<step><cmd>Add a post-requirement to the task, after the example.</cmd><stepxmp><codeph>&lt;postreq>Typically
you will not want to use a non-DITA reference as a container for other references,
since the output processes cannot add the links to children that a container
normally has.&lt;/postreq></codeph></stepxmp></step>
</steps>
</taskbody>
</task>
<task id="addlinks">
<title>Adding related links</title>
<shortdesc>You can add related links at the end of the task, including prerequisite
links that will be displayed with the prerequisite section on output.</shortdesc>
<taskbody>
<context>Wherever possible, you should manage your links from maps, so that
the task has few direct dependencies on other topics, and can easily be reused
in other collections. However, if your task is only being used in one collection,
or the links are unlikely to change in different contexts, you can add the
links directly to the topic. For this tutorial, add a prerequisite link, a
next link, and a simple related link.</context>
<steps>
<step><cmd>Add a &lt;related-links> element after the taskbody.</cmd></step>
<step><cmd>Add a link to the "Starting maps" task from the typed map sample,
and set importance="required": <userinput>&lt;link href="start.dita" importance="required"/></userinput>.</cmd>
<info>Any link with importance="required" is identified as a prerequisite,
unless a role attribute contradicts that. For example, a prerequisite can't
possibly have role="child" or role="next", since a child task can't be a prerequisite
for its parent, and the next task can't be a prerequisite for the current
one (or at least shouldn't). In cases where the link is marked as required
but isn't a prerequisite (for example &lt;link role="next" importance="required"),
the link will be sorted on output based on its role.</info></step>
<step><cmd>Add a link to the "Producing output" task from the same sample,
and set role="next": <userinput>&lt;link href="prodout.dita" role="next"/></userinput></cmd>
<info>If you want, you can also set importance="required" here. It won't make
a difference to the output, as described in the previous step.</info></step>
<step><cmd>Add a link to the "Adding external links" task from the same sample: <userinput>&lt;link
href="addext.dita"/></userinput></cmd></step>
<step><cmd>Copy the target files from the typed map sample into the same directory
as the task, so that the links can be resolved.</cmd></step>
</steps>
</taskbody>
</task>
<task id="reviewtask">
<title>Reviewing the markup</title>
<shortdesc>Compare your task with the its equivalent sample: <filepath>samples\typedmaps\source\tasks\addnon.dita</filepath> in
the typed map sample.</shortdesc>
<taskbody>
<context>The two should look substantially the same. See if you can find any
differences.</context>
</taskbody>
</task>
<task id="preview">
<title>Previewing results</title>
<shortdesc>Generate XHTML and PDF for the task, and see what the result looks
like.</shortdesc>
<taskbody>
<context>There are no generated headings in the output for &lt;prereq>, &lt;context>,
&lt;example>, or &lt;postreq> - only for the links, which are sorted by <i>importance</i>, <i>role</i>,
and <i>type</i>.</context>
<steps>
<step><cmd>Try adding a paragraph to one of the step &lt;info> elements, and
previewing again.</cmd><info>You may have to refresh your browser. You should
see that the task is no longer compact: once a block element, such as a paragraph,
is introduced in one step, blank lines are added between all steps, in accordance
with IBM style for lists.</info></step>
</steps>
</taskbody>
</task>
<concept id="taskstructure">
<title>Why so much structure?</title>
<shortdesc>While this particular task used most of the task-specific elements,
they are all optional.</shortdesc>
<conbody>
<p>Most tasks should be shorter than the one you created here. There is no
virtue in over-writing a task, or providing more information than the user
needs. At the bare minimum, a typical task should consist of title, short
description, steps, and result. An example is a good idea for many tasks,
but doesn't make sense for every task.</p>
<p>If you are creating an overview task, you can get away with including just
a title and short description, and letting the output processes create a summary
of the children as the task content. The children can be defined either as
links with role="child", or managed using nesting relationships in a map.
If you set collection-type="sequence", either on the linkpool that contains
the child links in the task, or on the &lt;topicref> for the overview task
in the map, the child links will even be numbered to look like task elements
on output.</p>
<p>So while the order of elements in a task is very closely defined, which
elements you use is left up to you. They should be viewed as prompts, or a
checklist, that can help you notice anything you've left out. For example,
does the step need a &lt;stepresult>? Does the task have prerequisites? It's
okay if the answer is no, and you skip the element, as long as you ask yourself
the question.</p>
</conbody>
</concept>
<concept id="phraselevel">
<title>What we skipped</title>
<shortdesc>We concentrated primarily on task-specific markup in this tutorial.
Ideally, however, you should also be using phrase-level markup, like &lt;keyword>
for occurrences of topicref, and &lt;userinput> for places where the reader
will type or select values.</shortdesc>
<conbody>
<p>While the &lt;keyword> markup won't affect formatting, it could have an
effect on search or indexing of the content. &lt;userinput> will format its
contents in monospace on output.</p>
</conbody>
</concept>
<concept id="summary">
<title>Summary</title>
<shortdesc>You have added a task, including each of its parts, different kinds
of steps, and related links. You have seen how this structure reflects the
different possibilities for task content, and encourages consistent task authoring.</shortdesc>
<conbody></conbody>
</concept>
</task>
</dita>
