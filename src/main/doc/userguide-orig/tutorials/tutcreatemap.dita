<?xml version="1.0" encoding="utf-8"?>
<!-- (c) Copyright IBM Corp. 2004, 2006 All Rights Reserved. -->
<!DOCTYPE dita PUBLIC "-//IBM//DTD DITA Composite//EN"
 "..\dtd\ditabase.dtd">
<dita>
<task id="tutcreatemap" xml:lang="en-us">
<title>Tutorial: Creating a map</title>
<shortdesc>Learn how to create and publish a simple map, including topic references,
a topic hierarchy, and collection types.</shortdesc>
<prolog><metadata>
<keywords><indexterm>maps<indexterm>simple map tutorial</indexterm></indexterm>
<indexterm>simple map tutorial</indexterm></keywords>
</metadata></prolog>
<taskbody>
<context>This tutorial introduces map concepts with simple examples. The map
you will create is designed to demonstrate the concepts, and should not be
taken as a realistic example of usage. More realistic walkthroughs of map
creation are provided in the follow-on map tutorials.</context>
<result>At the end of the tutorial, you will know:<ul>
<li>Where to create maps</li>
<li>How to add and nest topic references</li>
<li>How to define sequences and families of references</li>
<li>How to generate output, in HTMLHelp, Eclipse, and PDF formats</li>
<li>How to manage links using maps</li>
<li>How to override the titles and short descriptions in topics</li>
<li>How to add references to topics outside your information set</li>
<li>How to add references to non-DITA content</li>
</ul></result>
</taskbody>
<task id="openmap">
<title>Starting a map</title>
<shortdesc>You can use maps to manage a collection of topics. When you create
a new map, it must be in a directory that contains the topics (directly or
through subdirectories) that you want to manage.</shortdesc>
<taskbody>
<context><p>Maps describe the relationships within a collection of topics.
Maps can be used to drive processing for the collection (for example, transforming
all the referenced topics into HTML, or producing a PDF for the collection),
generate navigation files (for example, Eclipse or HTMLHelp tables of contents),
and manage the related links among the topics.</p><p>Create your map in a
directory that contains the topics you want to manage. The topics can be organized
into subdirectories (for example, a /concepts directory, /tasks/ directory,
/tasks/simple/ and /tasks/advanced, and so on). The topic directories can
be nested to any level, as long as the map is defined at a level that contains
them all.</p><p><ph id="generalmapinst">Follow the instructions for your map
editor; general instructions are included here. </ph>To create the map file:</p></context>
<steps>
<step><cmd>Start your editor.</cmd></step>
<step><cmd>Start a new DITA map.</cmd></step>
<step><cmd>Save the map in a directory that will contain topics.</cmd><tutorialinfo>For
this tutorial, save it as <filepath>tut-map-simple\simplemap.ditamap</filepath>.</tutorialinfo>
</step>
<step><cmd>Change the name of the map by editing its <i>title</i> attribute.</cmd>
<tutorialinfo>For this tutorial, name the map <userinput>Simple map</userinput>.</tutorialinfo>
<info>You can refresh the generated text to reflect the new title.</info>
</step>
<step><cmd>Delete the rest of the map content, leaving only the &lt;map> element.</cmd>
</step>
</steps>
<result>You now have a map with a single root element: &lt;map>, to which
you can add references to topics that you want to author, organize, and publish.</result>
</taskbody>
</task>
<task id="addtopicref">
<title>Adding a simple topic reference</title>
<shortdesc>Topic references are the main content of a DITA map. They can be
used to point to both DITA and non-DITA content, and to reflect relationships
among the topics. Topic references can be to local content (accessible by
the map), or to peer or external content that map processes (such as publishing)
will not have access to, although it is related to the map's collection and
needs to be referenced by the map.</shortdesc>
<taskbody>
<context><ph conref="tutcreatemap.dita#openmap/generalmapinst"></ph>Add a
topic reference for simple.dita to the map:</context>
<steps>
<step><cmd>Move your cursor to within the &lt;map> element (between its start
and end tags), and insert a &lt;topicref> element.</cmd><info>You can also
use editor macros to add topic references; however, these are most useful
when you have an existing topic to reference. When you are creating a new
topic, you need to define all the attributes manually.</info></step>
<step><cmd>Add an <i>href</i> attribute to the &lt;topicref>, with the name
and location of the target topic.</cmd><tutorialinfo>For this tutorial, assume
the topic is in the same directory as the map, and name it <userinput>simple.dita</userinput>.</tutorialinfo>
<info>If you wanted to reference a particular topic inside a file, you could
add a # and then the id of the topic: for example, <codeph>simple.dita#thistopic</codeph>.
Without a topic id, the reference defaults to the first topic in the target
file.</info><tutorialinfo>For this tutorial, the file name is sufficient.</tutorialinfo>
</step>
</steps>
<result>You now have a map with a single reference to a DITA topic:<codeblock>&lt;map title="Simple map">
  &lt;topicref href="simple.dita"/>
&lt;/map></codeblock><p>If the target actually existed, you could process
this map to turn the target into XHTML, with associated navigation in HTMLHelp
or Eclipse format, or to turn the target into a PDF, with a table of contents
based on the map. Of course, with only a single topic being referenced, the
navigation files and tables of contents would look a bit silly. So before
we start adding content and running output transforms, let's add more topicrefs.</p> </result>
</taskbody>
</task>
<task id="nestingrefs">
<title>Nesting topic references</title>
<shortdesc>You can add topic references inside other topic references, to
build hierarchies that can be used for navigation, tables of contents, and
generated links.</shortdesc>
<taskbody>
<context><ph conref="tutcreatemap.dita#openmap/generalmapinst"></ph>Add a
reference to child1.dita inside the existing topic reference:</context>
<steps>
<step><cmd>Move your cursor to within the &lt;topicref> element (between its
start and end tags) and insert another &lt;topicref> element.</cmd></step>
<step><cmd>Open the new &lt;topicref>'s attribute editor, and give it an <i>href</i> of
child1.dita .</cmd></step>
</steps>
<result>You now have two topic references, one inside the other:<codeblock>&lt;map title="Simple map">
  &lt;topicref href="simple.dita">
    &lt;topicref href="child1.dita"/>
  &lt;/topicref>
&lt;/map></codeblock>This means that simple.dita is the parent of child1.dita,
in the same way that a chapter could be the parent of a section, or a task
could be the parent of a subtask.</result>
</taskbody>
</task>
<task id="createsequence">
<title>Defining a sequence</title>
<shortdesc>You can define a sequence of topic references by setting their
parent's collection type to sequence.</shortdesc>
<taskbody>
<context>If you have a sequence of topics, for example a series of tasks that
are typically performed in a particular order, or a series of concepts which
must be read in a particular order, you can define them as a sequence using
their parent's <i>collection-type</i> attribute. This results in next and
previous links being added to the topics in the sequence.</context>
<steps>
<step><cmd>Add two more topic references:</cmd>
<substeps>
<substep><cmd>Add a reference to child2.dita, right after child1.dita.</cmd>
</substep>
<substep><cmd>Add a reference to child3.dita, right after child2.dita</cmd>
</substep>
</substeps>
</step>
<step><cmd>Set the <i>collection-type</i> attribute for the simple.dita topicref
to <userinput>sequence</userinput>.</cmd><info>By default, siblings are assumed
to be unrelated except through their common parent.</info></step>
</steps>
<result>You now have a topic reference (simple.dita) with three children (child1.dita,
child2.dita, child3.dita), which are defined as a sequence (using the collection-type
attribute on simple.dita):<codeblock>&lt;map title="Simple map">
  &lt;topicref href="simple.dita" collection-type="<b>sequence</b>">
    &lt;topicref href="child1.dita"/>
    &lt;topicref href="child2.dita"/>
    &lt;topicref href="child3.dita"/>
  &lt;/topicref>
&lt;/map></codeblock></result>
</taskbody>
</task>
<task id="createfamily">
<title>Defining a family</title>
<shortdesc>You can define a family of topic references by setting their parent's
collection type to family.</shortdesc>
<taskbody>
<context>If you have a set of closely related concepts or tasks, for example
three ways of doing the same task that require different tradeoffs, or several
concepts that need to be compared or contrasted with each other, you can define
them as a family using their parent's <i>collection-type</i> attribute. This
results in links being added among all the topics in the family.</context>
<steps>
<step><cmd>Add three more topic references, as children of child2.dita:</cmd>
<substeps>
<substep><cmd>Add a reference to child2a.dita, inside the topicref to child2.dita.</cmd>
</substep>
<substep><cmd>Add a reference to child2b.dita, right after child2a.dita.</cmd>
</substep>
<substep><cmd>Add a reference to child3.dita, right after child2b.dita.</cmd>
<info>This means we now have two occurrences of child3.dita: it will show
up in two places in the navigation output, be embedded twice in the PDF output,
and receive two sets of related links in the HTML output. You can control
this behavior in more detail using the attributes toc, print, and linking.</info>
</substep>
</substeps>
</step>
<step><cmd>On the &lt;topicref> to child2.dita, set the <i>collection-type</i> attribute
to <userinput>family</userinput>.</cmd><info>This means that the children
of child2.dita (child2a.dita, child2b.dita, child3.dita) will link to each
other.</info></step>
</steps>
<result>You now have a hierarchy of topic references two levels deep, exercising
two collection types - sequence and family:<codeblock>&lt;map title="Simple map">
  &lt;topicref href="simple.dita" collection-type="<b>sequence</b>">
    &lt;topicref href="child1.dita"/>
    &lt;topicref href="child2.dita" collection-type="<b>family</b>">
      &lt;topicref href="child2a.dita"/>
      &lt;topicref href="child2b.dita"/>
      &lt;topicref href="child3.dita"/>
    &lt;/topicref>
    &lt;topicref href="child3.dita"/>
  &lt;/topicref>
&lt;/map></codeblock></result>
</taskbody>
</task>
<task id="addingtopics">
<title>Adding topics</title>
<shortdesc>Now that you've created the map, you need to create the content
it describes.</shortdesc>
<taskbody>
<context>You can copy the files from the samples/simplemap/source directory
into your current map's directory. Copy the following files:<ul>
<li>simple.dita</li>
<li>child1.dita</li>
<li>child2.dita</li>
<li>child2a.dita</li>
<li>child2b.dita</li>
<li>child3.dita</li>
</ul></context>
</taskbody>
</task>
<task id="genhtmlhelp">
<title>Generating HTMLHelp</title>
<shortdesc>If you have the HTML Help Workshop installed, you can generate
a compiled help file (.chm) directly from the editor.</shortdesc>
<taskbody>
<prereq><p>You can get the HTML Help Workshop from <xref href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/htmlhelp/html/hwMicrosoftHTMLHelpDownloads.asp"
scope="external"></xref>. Save and run the htmlhelp.exe file to install the
help compiler workshop. Add the folder you installed the compiler in to your
PATH environment variable. This will cause the compiler to run automatically
when you process your map file with the procedure below.</p><p>If you don't
have the HTML Help Workshop installed, you can generate just the XHTML content,
and use the root topic in the Web (simple.html) as the starting point for
your review - no table of contents is generated with plain XHTML. </p> </prereq>
<context><ph conref="tutcreatemap.dita#openmap/generalmapinst"></ph>To generate
XHTML files and compile into HTMLHelp:</context>
<steps>
<step><cmd>With the map open in the editor, select to generate XHTML with
options.</cmd></step>
<step><cmd>Select <uicontrol>Generate XHTML</uicontrol>.</cmd></step>
<step><cmd>Click <uicontrol>New</uicontrol> to start a new profile.</cmd>
</step>
<step><cmd>Name the profile <userinput>HTMLHelp</userinput>.</cmd></step>
<step><cmd>On the <wintitle>Directories</wintitle> page, direct the output
to <filepath>tut-map-simple\output</filepath></cmd></step>
<step><cmd>On the <wintitle>Navigation</wintitle> page, select <uicontrol>HTMLHelp</uicontrol>.</cmd>
</step>
<step><cmd>Save and close the profile.</cmd></step>
<step><cmd>Select and run the newly created HTMLHelp profile.</cmd></step>
</steps>
<result>The help file, which includes the local files referenced by the map,
is generated and compiled into <filepath>tut-map-simple\output\ simplemap.chm</filepath>.</result>
</taskbody>
</task>
<task id="geneclipse">
<title>Generating an Eclipse plugin</title>
<shortdesc>If you have the Eclipse workbench installed, you can generate documentation
and its navigation directly into an Eclipse plugin directory.</shortdesc>
<taskbody>
<prereq><p>You can get information on Eclipse help, at <xref href="http://w3-03.ibm.com/ux/site.nsf/u/publish/397"
scope="external"></xref>.</p></prereq>
<context>The map is transformed into an Eclipse navigation file, and each
topic file is transformed into an HTML file. To create the documentation plugin
and view its contents:</context>
<steps>
<step><cmd>Create the plugin directory, in the eclipse/plugins/ directory.</cmd>
<tutorialinfo>For this tutorial, create the directory eclipse/plugins/dita.tutorial.simplemap
.</tutorialinfo></step>
<step><cmd>In the directory, create a file called plugin.xml, which references
the navigation files for the plugin.</cmd><tutorialinfo>For this tutorial,
create plugin.xml, using a simple ASCII editor like Notepad, with the following
content:<pre>&lt;?xml version="1.0" encoding="UTF-8"?>

&lt;plugin
    name = "Simple map sample"
    id = "simplemap"
    version = "1.0.0"
    provider-name = "IBM">

  &lt;extension point="org.eclipse.help.toc">
   &lt;toc file="simplemap.xml" primary="true"/>
  &lt;/extension>

&lt;/plugin>

</pre></tutorialinfo></step>
<step><cmd>Select to generate XHTML with options.</cmd></step>
<step><cmd>Select <uicontrol>Generate XHTML</uicontrol>.</cmd></step>
<step><cmd>Click <uicontrol>New</uicontrol> to start a new profile.</cmd>
</step>
<step><cmd>Name the profile <userinput>Eclipse help</userinput>.</cmd></step>
<step><cmd>On the <wintitle>Directories</wintitle> page, direct the output
to eclipse/plugins/dita.tutorial.simplemap</cmd></step>
<step><cmd>On the <wintitle>Navigation</wintitle> page, select <uicontrol>Eclipse</uicontrol>.</cmd>
</step>
<step><cmd>Save and close the profile.</cmd></step>
<step><cmd>Select and run the newly created Eclipse help profile.</cmd></step>
</steps>
<result>The XHTML for each topic, and the navigation file simplemap.xml, have
been generated into the eclipse/plugins/dita.tutorial.simplemap directory.</result>
</taskbody>
</task>
<task id="reviewhtml">
<title>Reviewing XHTML output</title>
<shortdesc>You can see how the map affects output by browsing the navigation
and reviewing the output XHTML pages.</shortdesc>
<taskbody>
<context>The map defines the content of the navigation files, the set of XHTML
pages that will be produced, and the links that will be added to the XHTML
pages. For each of the output formats you produced, review the results of
the map processing:</context>
<steps>
<step><cmd>Review the HTMLHelp navigation:</cmd>
<substeps>
<substep><cmd>Locate the .chm file in your output directory, and double-click
on it.</cmd></substep>
<substep><cmd>Expand the table of contents, and compare its structure with
the structure of the map.</cmd><info>The structure should be the same, with
the titles of the topics filled in during processing.</info></substep>
<substep><cmd>Click on the first item in the table of contents to see simple.html,
the output from simple.dita.</cmd></substep>
</substeps>
</step>
<step><cmd>Review the Eclipse navigation:</cmd>
<substeps>
<substep><cmd>Launch the Eclipse workbench.</cmd><info>If you have just the
Eclipse runtime installed, you can launch the workbench by double-clicking
eclipse.exe in the Eclipse install directory. If you have an Eclipse-based
product installed, use whatever method it has implemented to launch the product.</info>
</substep>
<substep><cmd>Click <menucascade><uicontrol>Help</uicontrol><uicontrol>Help
Contents</uicontrol></menucascade> to display the help window.</cmd></substep>
<substep><cmd>In the Contents pane, click <uicontrol>Simple map</uicontrol>.</cmd>
</substep>
<substep><cmd>Expand the table of contents, and compare it with the map structure.</cmd>
</substep>
<substep><cmd>Click on the first item in the table of contents to see simple.html,
the output from simple.dita.</cmd></substep>
</substeps>
</step>
<step><cmd>Review the output for each topic:</cmd>
<substeps>
<substep><cmd>In the parent topics (simple.html and child2.html), review links
to child topics, and confirm that the link text and short descriptions have
been correctly pulled in from the child topics.</cmd></substep>
<substep><cmd>In the sequential topics (child1.html, child2.html, and child3.html),
review the next and previous links, and confirm that the text has been pulled
in correctly.</cmd><info>If you're using Internet Explorer, or a viewer based
on it, you can hover over the link to see the short description.</info></substep>
<substep><cmd>In the family-grouped topics (child2a.html, child2b.html, and
child3.html), review the links to siblings.</cmd></substep>
</substeps>
<stepresult>Topic child3.html has more links than the others because it participates
in more relationships:<ul>
<li>It has two parents, simple.html and child2.html</li>
<li>It has a next and previous link, based on the sequence relationship among
simple.html's children</li>
<li>It has a separate set of sibling links, based on the family relationship
among child2.html's children</li>
</ul></stepresult></step>
</steps>
<result><p>Each link in the output has its text and description derived from
the target topic's title and short description. In child links, the description
is included after the link text as part of the output content. In other kinds
of links, the description only appears if you hover over the link in a browser
that supports the feature.</p></result>
</taskbody>
</task>
<task id="genpdf">
<title>Generating a PDF</title>
<shortdesc>You can use a map to generate a PDF, with chapter and section nesting
based on the hierarchy of topic references in the map.</shortdesc>
<taskbody>
<prereq>You must have IDWB set up with access to a server that can process
your content into PDF.</prereq>
<context><ph conref="tutcreatemap.dita#openmap/generalmapinst"></ph>To generate
PDF:</context>
<steps>
<step><cmd>With the map open in the editor, select to generate PDF with options.</cmd>
</step>
<step><cmd>Select <uicontrol>Generate PDF</uicontrol>.</cmd></step>
<step><cmd>Click <uicontrol>New</uicontrol> to start a new profile.</cmd>
</step>
<step><cmd>Name the profile <userinput>PDF output</userinput>.</cmd></step>
<step><cmd>On the <wintitle>Directories</wintitle> page, direct the output
to <filepath>tut-map-simple\output</filepath></cmd></step>
<step><cmd>Save and close the profile.</cmd></step>
<step><cmd>Select and run the newly created PDF output profile.</cmd></step>
</steps>
<result>The PDF, which includes the local files referenced by the map, is
distilled into <filepath>tut-map-simple\output\ simplemap.pdf</filepath>. </result>
</taskbody>
</task>
<concept conref="../concepts/mhowlink.dita#mhowlink" id="howlinks">
<title>How links come from maps</title>
<conbody></conbody>
</concept>
<concept conref="../concepts/linkpdf.dita#linkpdf" id="pdflinking">
<title>Links in PDFs</title>
<conbody></conbody>
</concept>
<task id="overridingtitle">
<title>Overriding titles</title>
<shortdesc>By default, maps will use the titles and short descriptions of
the target topics in generated navigation and link labels and summaries. You
can override this by defining titles or short descriptions within the map,
for a particular topic reference.</shortdesc>
<taskbody>
<context><ph conref="tutcreatemap.dita#openmap/generalmapinst"></ph>To override
navigation labels, link labels, and short descriptions used for summaries:</context>
<steps>
<step><cmd>Locate the second instance of child3.dita (the one that is a child
of simple.dita).</cmd></step>
<step><cmd>Set its <i>navtitle</i> attribute to <userinput>Second instance
of child3</userinput>.</cmd><info>The <i>navtitle</i> defines the label to
be used in any generated navigation, for example an Eclipse table of contents
file or an HTMLHelp .hhc file.</info></step>
<step><cmd>Set its <i>locktitle</i> attribute to <userinput>yes</userinput>.</cmd>
<info>If you do not set the <i>locktitle</i> attribute, the title will still
be fetched from the target, on the assumption that the local title is just
to help you understand the map.</info></step>
<step><cmd>Inside the topic reference, add a &lt;topicmeta> element.</cmd>
<info>The&lt;topicmeta> element can contain link text to be used instead of
the topic title, a short description to use instead of the topic's short description,
and a variety of metadata elements. This lets you supplement or replace the
metadata information in the topic with whatever metadata your publishing context
requires. For example, you might be reusing a topic from another group, and
need to supplement their product information metadata and audience definitions.</info>
</step>
<step><cmd>Inside the &lt;topicmeta> element, add a &lt;linktext> element,
and give it the content <userinput>Link to child3 (second instance)</userinput>.</cmd>
<info>This link text will be used when other topics link to child3.dita, based
on the position of the current topic reference. The link text isn't used by
links generated for the first instance.</info></step>
<step><cmd>Inside the &lt;topicmeta> element, add a &lt;shortdesc> element,
and give it the content <userinput>A short description of child3 (second instance).</userinput></cmd>
<info>This will replace the short description defined in the topic itself,
in each link derived from the first topic reference to child3.dita.</info>
</step>
</steps>
</taskbody>
</task>
<task id="reviewoverrides">
<title>Reviewing overrides</title>
<shortdesc>Regenerate the HTML and navigation to see the effect of the overrides.</shortdesc>
<taskbody>
<context>Because you provided a navigation title, link text, and a short description
for the first instance of child3.dita, you can now easily tell the difference
between links generated based on the first instance  (which use the topic's
title as link text) and links generated for the second instance (which use
the link text you provided in the map).</context>
<steps>
<step><cmd>Review the table of contents (Eclipse or HTMLHelp only).</cmd>
<stepresult>The entry for the second instance of child3.dita now uses the
navigation title you defined in the map. The first instance still uses the
topic title.</stepresult></step>
<step><cmd>Open simple.html, and review its link to child3.html.</cmd><stepresult>It
uses the link text and short description you provided, because its link is
based on the second instance of child3.dita.</stepresult></step>
<step><cmd>Open child2.html, and review its links to child3.html.</cmd><stepresult>The
link to child3.html as a next topic uses the link text you provided, because
it is based on child3.dita's second instance in the map. The link to child3.html
as a child topic, however, uses the topic's link text and short description,
because it is based on the first instance in the map.</stepresult></step>
<step><cmd>Open child2a.html and child2b.html, and review their links to child3.html.</cmd>
<stepresult>Because their links are based on the first instance, they use
the target topic's link text.</stepresult></step>
</steps>
</taskbody>
</task>
<task id="addexternal">
<title>Adding an external reference</title>
<shortdesc>You can add references from a map to external content, using the
scope attribute. This lets you manage links to external content from within
the map, even though the external content won't be built or managed through
the map.</shortdesc>
<taskbody>
<context><p>When you process the map, other topics that are related by position
to the external reference (for example as a parent, child, or collection-typed
sibling of the external reference) will get links added based on the reference.
If you want to link to non-DITA content that is actually part of your information
set, use the <i>format</i> attribute to describe the type of content (for
example, format="pdf") and the process will handle the content appropriately,
by copying the referenced file to the output directory but not attempting
to open or process it. But if you want to link to completely external content,
such as an external Web site or PDF, you can use the <i>scope</i> attribute
to tell the process not to attempt copying the target.</p><p><ph conref="tutcreatemap.dita#openmap/generalmapinst"></ph>To
add an external reference:</p></context>
<steps>
<step><cmd>Add a &lt;topicref> as the last child of simple.dita, with an <i>href</i> value
of http://www.ibm.com .</cmd></step>
<step><cmd>Set the <i>scope</i> attribute to <userinput>external</userinput>.</cmd>
<info>This tells processes that the target is outside of the current information
set.</info></step>
<step><cmd>Add a &lt;topicmeta> element inside the &lt;topicref>, and a &lt;shortdesc>
element inside that.</cmd></step>
<step><cmd>In the &lt;shortdesc> element, type a short description: <userinput>IBM's
Web site</userinput></cmd></step>
</steps>
<result>The topic reference will be used by map processes as a target for
links, but will otherwise be ignored. By default, the reference is assumed
to be to non-DITA content, so setting the <i>format</i> attribute is optional.
Links to the content will open in a new browser window, to differentiate the
external content from your information set. Because you did not explicitly
define the <i>navtitle</i>, the <i>href</i> value will be used as its label
in output.</result>
</taskbody>
</task>
<task id="peertopic">
<title>Adding a peer topic reference</title>
<shortdesc>You can set the <i>scope</i> attribute for a &lt;topicref> to indicate
that it is part of your information set but not available at processing time.
For example, if you are creating the map for a single component of a larger
help set or information center, you can use a &lt;topicref> of scope="peer"
to refer to topics in other components.</shortdesc>
<taskbody>
<context><p>Peer topics will not be included in any output PDF, nor will the
target be transformed to HTML at the same time as local topics. However, generated
Eclipse navigation files will reference the topic, on the assumption that
the link will work at runtime (on the user's machine or a server), even if
it isn't accessible now.</p><p><ph conref="tutcreatemap.dita#openmap/generalmapinst"></ph>To
add a reference to a topic in another component:</p> </context>
<steps>
<step><cmd>Add another &lt;topicref>, again as the last child of simple.dita.</cmd>
</step>
<step><cmd>Give the &lt;topicref> an <i>href</i> value of peerref.dita.</cmd>
</step>
<step><cmd>In the <i>scope</i> attribute, set the scope of the reference to <userinput>peer</userinput>.
The allowable values are:</cmd>
<choices>
<choice><userinput>local</userinput>: the default for DITA topics; if you
do not set the scope attribute, the target is assumed to be part of the intended
output, and the build processes will attempt to access the file.</choice>
<choice><userinput>peer</userinput>: indicates that the target topic will
not be available at build time, but will be available at runtime: so while
the topic itself cannot be accessed or processed, the output may include links
to the topic that will resolve at runtime.</choice>
<choice> <userinput>external</userinput>: indicates that the target topic
is outside of your information set, for example in another Web site. When
you set scope="external", generated links to the target will open a new browser
window.</choice>
</choices>
</step>
<step><cmd>In the <i>navtitle</i> attribute, provide the label for the topic
that will show up in the output navigation.</cmd><info>For local &lt;topicref>s,
you can leave off the <i>navtitle</i>, because output processes can figure
out the title by inspecting the target. For peer or external topicrefs to
DITA content, however, you should specify the <i>navtitle</i> directly.</info>
</step>
<step><cmd>Add a &lt;topicmeta> element inside the &lt;topicref>, and a &lt;shortdesc>
element inside that.</cmd></step>
<step><cmd>In the &lt;shortdesc> element, type a short description: <userinput>This
is a short description.</userinput></cmd></step>
</steps>
<result>Your map now contains two topic references: only the first one will
be included in HTML or PDF processing, but both will be included in generated
navigation files.</result>
</taskbody>
</task>
<task id="nonditaref">
<title>Adding a non-DITA reference</title>
<shortdesc>When you reference non-DITA content, use the <i>format</i> attribute
to describe its format (for example, pdf or html).</shortdesc>
<taskbody>
<context><p>While <i>scope</i> controls the accessibility of a topic based
on its relative location, <i>format</i> controls the accessibility of a topic
based on its format. <i>Format</i> is assumed to be DITA except when the &lt;topicref>
is to external content, when the default is non-DITA.</p><p>Links to PDFs
will open in a new browser window by default. You can override this by explicitly
setting the <i>scope</i> attribute to local or peer, as appropriate.</p><p>In
this exercise, you will explicitly set both the <i>scope</i> and <i>format</i> attributes.</p> </context>
<steps>
<step><cmd>Add another &lt;topicref>, again as the last child of simple.dita.</cmd>
</step>
<step><cmd>Set the <i>href</i> attribute to <userinput>readme.html</userinput></cmd>
</step>
<step><cmd>Set the <i>scope</i> attribute to peer.</cmd></step>
<step><cmd>Set the <i>format</i> attribute to html.</cmd></step>
<step><cmd>Apply your changes and close the attribute editor.</cmd></step>
<step><cmd>Add a &lt;topicmeta> element inside the &lt;topicref>, and a &lt;shortdesc>
element inside that.</cmd></step>
<step><cmd>In the &lt;shortdesc> element, type a short description: <userinput>The
readme file for this component.</userinput></cmd></step>
</steps>
<result>You now have a reference to an HTML file that will be part of your
final information set, although not part of the current build. The label for
the reference will default to the <i>href</i> value, since we didn't provide
a navigation title explicitly, and the target's content is inaccessible, based
on both the <i>format</i> and <i>scope</i> settings. You needed to provide
a short description explicitly because there is no appropriate default for
it. If you left off the short description there would be no warning, since
the element is optional, but child links to the readme file would not include
a summary, and other links would not include any hover help.</result>
</taskbody>
</task>
<task id="reviewagain">
<title>Reviewing scoped references</title>
<shortdesc>Regenerate the HTML and navigation to see how the new references
are incorporated.</shortdesc>
<taskbody></taskbody>
</task>
<concept id="summary">
<title>Summary</title>
<shortdesc>You have created a simple map, including nested topic references
and different collection types, and generated various kinds of output, including
navigation trees, related links, and PDFs.</shortdesc>
<conbody>
<p>You have seen how to use the &lt;topicref> attributes <i>scope</i>, <i>format</i>, <i>collection-type</i>,
and <i>locktitle</i> to distinguish what a topic reference points to, how
it relates to other topic references, and how text will get pulled from the
topic reference. You have seen how links are generated differently for HTML
and PDF output, and how topic titles and short descriptions are reused in
navigation and linking.</p>
<p>Compare your map to the sample map in samples/simplemap/source, and compare
your output to the sample output in samples/simplemap/output</p>
<p>You are now ready to proceed to the rest of the tutorials, where you'll
learn how to create different kinds of maps for different information types,
building task, concept, and reference hierarchies through task analysis of
scenarios.</p>
</conbody>
</concept>
</task>
</dita>
