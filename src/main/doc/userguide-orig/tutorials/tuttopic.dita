<?xml version="1.0" encoding="utf-8"?>
<!-- (c) Copyright IBM Corp. 2004, 2006 All Rights Reserved. -->
<!DOCTYPE dita PUBLIC "-//IBM//DTD DITA Composite//EN"
 "..\dtd\ditabase.dtd">
<dita>
<task id="tuttopic" xml:lang="en-us">
<title>Tutorial: Creating a topic</title>
<shortdesc>Learn how to create a simple topic, including title, short description,
and some content.</shortdesc>
<prolog><metadata>
<keywords><indexterm>topics<indexterm>simple topic tutorial</indexterm></indexterm>
<indexterm>simple topic tutorial</indexterm></keywords>
</metadata></prolog>
<taskbody>
<context>Topics are a generic kind of content, unlike concepts, tasks, and
reference information, which have an associated information type. You should
only author content as a generic topic when it genuinely isn't appropriate
for one of the supported information types. For this tutorial, however, we
will use the generic topic to introduce some structures and markup that are
common to all the information types.</context>
<result>After you complete the tutorial, you will know:<ul>
<li>How to add titles and short descriptions</li>
<li>What section-level markup is, and how to add it</li>
<li>What block-level markup is, and how to add it</li>
<li>What phrase-level markup is, and how to add it</li>
</ul></result>
</taskbody>
<task id="prepdir">
<title>Preparing a project directory</title>
<shortdesc>Set up your project to hold content and enable previews.</shortdesc>
<taskbody>
<context>Create a directory to hold maps, a search path to resolve links during
previews, and subdirectories for content.</context>
<steps>
<step><cmd>Create a directory named <filepath>tut-content</filepath></cmd>
</step>
<step><cmd>In the directory, add a search path file:</cmd>
<substeps>
<substep><cmd>Open the directory in Windows Explorer.</cmd></substep>
<substep><cmd>From the background of the directory, right-click and select <menucascade>
<uicontrol>New</uicontrol><uicontrol>DITA Search File Path</uicontrol></menucascade></cmd>
</substep>
<substep><cmd>Name the file <filepath>tut-content.dsh</filepath></cmd></substep>
</substeps>
</step>
<step><cmd>Add the current directory to the search path:</cmd>
<substeps>
<substep><cmd>Open the Dita search path file.</cmd></substep>
<substep><cmd>Click <menucascade><uicontrol>Edit</uicontrol><uicontrol>Add
Directory</uicontrol></menucascade></cmd></substep>
<substep><cmd>Browse and select the current directory (tut-content).</cmd>
</substep>
<substep><cmd>Click <uicontrol>OK</uicontrol>.</cmd></substep>
<substep><cmd>Save the file.</cmd></substep>
</substeps>
</step>
<step><cmd>Set your preview options for XHTML and PDF to use the new search
path file.</cmd><info>Use your IDWB or editor guide to learn how to set the
preview defaults.</info></step>
<step><cmd>Create four subdirectories to hold your content: \topics, \concepts,
\tasks, and \ref </cmd></step>
</steps>
<result><p>You should have a DITA search path named <filepath>tut-content.dsh</filepath> with
this content:<codeblock>DIR:c:\tut-content</codeblock></p><p>You should have
a directory structure like the following:<codeblock>c:\tut-content
c:\tut-content\concepts
c:\tut-content\tasks
c:\tut-content\topics
c:\tut-content\ref
</codeblock></p></result>
</taskbody>
</task>
<task id="starttopic">
<title>Starting a topic</title>
<shortdesc>Topics can be defined in standalone files, or as parts of compound
documents.</shortdesc>
<taskbody>
<context>Create your content in the same directory as your maps, or a subdirectory
of the maps' directory. In this case, add the topic to a \topics subdirectory.</context>
<steps>
<step><cmd>Open a new DITA topic, using the Topic document type.</cmd><info>Topic
isn't an information type in the same way as concept, task, or reference:
it's really a topic without any type. </info></step>
<step><cmd>Change the <i>title</i> to <userinput>Simple topic</userinput>.</cmd>
</step>
<step><cmd>Change the <i>id</i> to <userinput>thistopic</userinput>.</cmd>
</step>
<step><cmd>Save this topic in the \topics subdirectory as simpletopic.dita: <filepath>tut-content/topics/simpletopic.dita</filepath>.</cmd>
</step>
<step><cmd>Delete all the content of the body, and leave just an empty &lt;body>
element.</cmd></step>
</steps>
<result>You should have a file named <filepath>c:\tut-content\topics\simpletopic.dita</filepath>,
which contains this content:<codeblock>&lt;topic id="thistopic" xml:lang="en-us">
  &lt;title>Simple topic&lt;/title>
  &lt;body>
  &lt;/body>
&lt;/topic></codeblock></result>
</taskbody>
</task>
<concept id="titledesc" conref="../concepts/contitle.dita#contitle">
<title>Topic titles, descriptions, and references</title>
<conbody></conbody>
</concept>
<task id="shortdesc">
<title>Adding a short description</title>
<shortdesc>Short descriptions give a brief introduction to the topic, typically
a sentence or two, never more than a paragraph. Short descriptions should
make sense on their own, so that they can be reused as previews of the topic
or in summaries.</shortdesc>
<taskbody>
<steps>
<step><cmd>Move your cursor after the title but before the body.</cmd></step>
<step><cmd>Insert the &lt;shortdesc> element.</cmd></step>
<step><cmd>Type a short description: <userinput>This topic demonstrates some
basic elements of DITA content.</userinput></cmd></step>
</steps>
<result>You should have a file named <filepath>c:\tut-content\topics\simpletopic.dita</filepath>,
which contains this content:<codeblock>&lt;topic id="thistopic" xml:lang="en-us">
  &lt;title>Simple topic&lt;/title>
  <b>&lt;shortdesc>This topic demonstrates some basic elements of DITA content.&lt;/shortdesc></b>
  &lt;body>
  &lt;/body>
&lt;/topic></codeblock></result>
</taskbody>
</task>
<task id="addsect">
<title>Adding a section</title>
<shortdesc>Sections are non-nesting subheadings within a topic. You can also
use them to create untitled groupings of text for reuse. If you need nested
subheadings, don't use sections - nest your topics instead.</shortdesc>
<taskbody>
<context>The &lt;section> element isn't allowed in tasks. In concepts, use
sections to provide headings for main points in a longer explanation. In reference
topics, use sections for repeating headings like <b>Purpose</b> or <b>Usage</b> that
don't constitute a new topic in themselves, just a partition of the current
topic. For this tutorial, create a &lt;section> element with a &lt;title>:</context>
<steps>
<step><cmd>In the &lt;body>, insert a &lt;section> element.</cmd></step>
<step><cmd>In the &lt;section>, insert a &lt;title> element.</cmd><info>The
&lt;title> is optional, since sometimes you need to group information for
purposes where a title isn't appropriate: like creating a common set of paragraphs
that are reused in several topics, or creating two different introductions
to a topic for different audiences.</info></step>
<step><cmd>In the &lt;title>, type <userinput>Exercises in content markup</userinput></cmd>
</step>
</steps>
<result>You should have a file named <filepath>c:\tut-content\topics\simpletopic.dita</filepath>,
which contains this content:<codeblock>&lt;topic id="thistopic" xml:lang="en-us">
  &lt;title>Simple topic&lt;/title>
  &lt;shortdesc>This topic demonstrates some basic elements of DITA content.&lt;/shortdesc>
  &lt;body>
    <b>&lt;section>
      &lt;title>Exercises in content markup&lt;/title>
    &lt;/section></b>
  &lt;/body>
&lt;/topic></codeblock></result>
</taskbody>
</task>
<task id="addxmp">
<title>Adding an example</title>
<shortdesc>Examples are a special kind of section. They take the same kind
of content, and look the same on output, but are marked as examples for the
sake of XML-aware searching and filtering.</shortdesc>
<taskbody>
<context>Typically an example would contain such things as <codeph>codeblock</codeph> elements,
or images showing possible settings for a configuration panel. For this tutorial,
just insert a title.</context>
<steps>
<step><cmd>After the end of the section, insert an &lt;example>.</cmd></step>
<step><cmd>In the &lt;example>, insert a &lt;title> element.</cmd><info>As
with &lt;section>, the &lt;title> is optional. However, in this case you might
want to omit the title if it's unnecessary, for example if the topic is short
and the content of the example is a screen capture that doesn't require its
own title.</info></step>
<step><cmd>In the title, type <userinput>Examples of markup</userinput></cmd>
</step>
</steps>
<result>You should have a file named <filepath>c:\tut-content\topics\simpletopic.dita</filepath>,
which contains this content:<codeblock>&lt;topic id="thistopic" xml:lang="en-us">
  &lt;title>Simple topic&lt;/title>
  &lt;shortdesc>This topic demonstrates some basic elements of DITA content.&lt;/shortdesc>
  &lt;body>
    &lt;section>
      &lt;title>Exercises in content markup&lt;/title>
    &lt;/section>
    <b>&lt;example>
      &lt;title>Examples of markup&lt;/title>
    &lt;/example></b>
  &lt;/body>
&lt;/topic></codeblock></result>
</taskbody>
</task>
<concept id="blockelems" conref="../concepts/blocks.dita#blocks">
<title>Block-level elements</title>
<conbody></conbody>
</concept>
<task id="addpara">
<title>Adding a paragraph</title>
<shortdesc>Paragraphs are the most common structural element in documentation.</shortdesc>
<taskbody>
<context>Within a topic, you can add paragraphs either to sections, or directly
within the body. The task and reference information types require a container
for paragraphs, but in concepts, as with the generic topic, you can add paragraphs
as the first element. For this tutorial, add the paragraph to the existing
section.</context>
<steps>
<step><cmd>Add a paragraph (&lt;p>) element to the section, with whatever
text you prefer.</cmd></step>
</steps>
<result>You should have a file named <filepath>c:\tut-content\topics\simpletopic.dita</filepath>,
which contains this content:<codeblock>&lt;topic id="thistopic" xml:lang="en-us">
  &lt;title>Simple topic&lt;/title>
  &lt;shortdesc>This topic demonstrates some basic elements of DITA content.&lt;/shortdesc>
  &lt;body>
    &lt;section>
      &lt;title>Exercises in content markup&lt;/title>
      <b>&lt;p>Here's my cute, little paragraph.&lt;/p></b>
    &lt;/section>
    &lt;example>
      &lt;title>Examples of markup&lt;/title>
    &lt;/example>
  &lt;/body>
&lt;/topic></codeblock></result>
</taskbody>
</task>
<task id="addlist">
<title>Adding lists</title>
<shortdesc>Lists are also common structural elements. You can create simple,
unordered, ordered, and definition lists. Some information types have more
specific kinds of list, like the steps in a task, but they are only available
within the information type, in a specific place. The general kinds of list
are available almost anywhere. Within a topic, you can add them directly to
the body, but you can always add them to a paragraph or a section.</shortdesc>
<taskbody>
<steps>
<step><cmd>Add a simple list (&lt;sl>) to the existing paragraph, with three
items, with only one or two words each.</cmd><info>Use simple lists when each
list item fits on a single line, and so you don't need bullets to distinguish
them. Keep in mind that the content may be displayed in a very small window,
such as a help window. If you are unsure whether the content will wrap or
not, use an unordered list (with bullets) instead.</info></step>
<step><cmd>Add an unordered list (&lt;ul>) after the existing paragraph, with
two items. Put a sentence in one and a paragraph in the other.</cmd><info>On
output, lists will be shown in compact form (no space between each item) unless
you set compact="no". Each list item will have a bullet, cicle, or dash before
the text. If the text is wider than the margins, the text automatically wraps
and indents.</info></step>
<step><cmd>Add an ordered list (&lt;ol>) after the unordered list, with two
items.</cmd><info>Ordered lists are substantially the same as unordered lists
in terms of what they allow, but the output will use numbers instead of bullets
to identify the items.</info></step>
<step><cmd>Add a definition list (&lt;dl>) after the ordered list, with two
items.</cmd><info>Each item in a definition list has two parts: the term,
and the definition. You can add multiple terms to the same entry if they share
a description, or multiple descriptions to the same term if it has multiple
meanings. Typically, however, there should be only one of each in an entry.</info>
<info>You can define headings for the terms (such as "Options") and their
descriptions (for example "Results") in a &lt;dlhead> for the definition list.</info>
</step>
</steps>
<result>You should have a file named <filepath>c:\tut-content\topics\simpletopic.dita</filepath>,
which contains this content:<codeblock>&lt;topic id="thistopic" xml:lang="en-us">
 &lt;title>Simple topic&lt;/title>
 &lt;shortdesc>This topic demonstrates some basic elements of DITA content.&lt;/shortdesc>
 &lt;body>
  &lt;section>
   &lt;title>Exercises in content markup&lt;/title>
   &lt;p>Here's my cute, little paragraph. Things to get:
    &lt;sl>
     &lt;sli>orange juice&lt;/sli>
     &lt;sli>apple juice&lt;/sli>
     &lt;sli>prune juice&lt;/sli>
    &lt;/sl>
   &lt;/p>
   &lt;ul>
    &lt;li>You use an unordered list when your items might wrap from one line to another.&lt;/li>
    &lt;li>You also use them when order is not important.&lt;/li>
   &lt;/ul>
   &lt;ol>
    &lt;li>Ordered lists, by definition, imply an order to the steps.&lt;/li>
    &lt;li>This is the last item to read here.&lt;/li>
   &lt;/ol>
   &lt;dl>
    &lt;dlentry>&lt;dt>aardvark&lt;/dt>
    &lt;dd>A long-nosed mammal that could be an anteater.&lt;/dd>&lt;/dlentry>
    &lt;dlentry>&lt;dt>zebra&lt;/dt>
    &lt;dd>A striped horsie.&lt;/dd>&lt;/dlentry>
   &lt;/dl>
  &lt;/section>
  &lt;example>
   &lt;title>Examples of markup&lt;/title>
  &lt;/example>
 &lt;/body>
&lt;/topic></codeblock></result>
</taskbody>
</task>
<concept id="phrases" conref="../concepts/phkey.dita#phkey">
<title>Phrases and keywords</title>
<conbody></conbody>
</concept>
<task id="addph">
<title>Adding phrases and keywords</title>
<shortdesc>Try out some of the more common phrases and keywords, adding them
to your existing paragraphs and list items.</shortdesc>
<taskbody>
<steps>
<step><cmd>Add a phrase to the paragraph, using the &lt;ph> element.</cmd>
<info>Phrases are the most generic markup. They allow you to assign ids for
content reuse, or metadata attributes for flagging and filtering, but don't
imply anything about the content. Phrases can contain other phrase-level markup.</info>
<stepxmp>Paragraph with a phrase element:<codeblock>&lt;p>Here's my &lt;ph>cute, little paragraph&lt;/ph>.&lt;/p></codeblock></stepxmp>
</step>
<step><cmd>Add a keyword to the phrase, using the &lt;keyword> element.</cmd>
<info>Use keywords for important words or short phrases that can't be marked
up appropriately with more specific phrase-level elements. Keywords don't
have any special formatting on output, but may be used for automatic indexing
or search purposes. Keywords can't contain other markup.</info><stepxmp>Paragraph
with a phrase and keyword elements:<codeblock>&lt;p>Here's my &lt;ph>cute, &lt;keyword>little&lt;/keyword> paragraph&lt;/ph>.&lt;/p></codeblock></stepxmp>
</step>
<step><cmd>Add a &lt;codeph> to one of the list items.</cmd><info>Code phrases
are for short sections of code: more than a simple API name (for which you'd
use apiname) but not a multi-line program listing (for which you'd use codeblock). </info>
<stepxmp>List item with a code phrase element::<codeblock>&lt;li>You use &lt;codeph>an unordered list&lt;/codeph> when your items 
might wrap from one line to another.&lt;/li></codeblock></stepxmp></step>
<step><cmd>Add a &lt;menucascade> to one of the lists.</cmd><info>Menu cascades
let you express a sequence of menu choices, each in a &lt;uicontrol> element,
like <menucascade><uicontrol>Tools</uicontrol><uicontrol>Compare</uicontrol>
<uicontrol>Files</uicontrol></menucascade>. You can also use uicontrol on
its own for simpler user interface elements, for example an <uicontrol>OK</uicontrol> button.</info>
<stepxmp>List item with a menu cascade:<codeblock>&lt;li>Calculating things: &lt;menucascade>&lt;uicontrol>Start&lt;/uicontrol>
&lt;uicontrol>Programs&lt;/uicontrol>&lt;uicontrol>Accessories&lt;/uicontrol>
&lt;uicontrol>Calculator&lt;/uicontrol>&lt;/menucascade>&lt;/li></codeblock></stepxmp>
</step>
<step><cmd>Add some &lt;userinput> text to the example section.</cmd><info>User
input is for text that a user will type into a field or at a command prompt.</info>
<stepxmp>The example section with the code phrase:<codeblock>&lt;example>
&lt;title>Examples of markup&lt;/title>
&lt;p>After you log on, enter your &lt;userinput>password&lt;/userinput>&lt;/p>
&lt;/example></codeblock></stepxmp></step>
<step><cmd>Add a &lt;codeblock> to the example section.</cmd><info>Code blocks
are for multiple-line fragments of code. They are typically formatted in monospace
on output, and line breaks will be preserved.</info><stepxmp>The example section
with the previous code phrase and a code example:<codeblock>&lt;example>
&lt;title>Examples of markup&lt;/title>
&lt;p>After you log on, enter your &lt;userinput>password&lt;/userinput>&lt;/p>
&lt;p>A program listing with some interesting results:
&lt;codeblock>
if (music -be- the-fruit-of-love) {
  play on
  }
&lt;/codeblock>&lt;/p>
&lt;/example></codeblock></stepxmp></step>
</steps>
</taskbody>
</task>
<task id="addtbl">
<title>Adding tables</title>
<shortdesc>Tables are another common structure in DITA. There are two main
kinds of tables: simple, and complex. In addition there are a number of special-purpose
tables, such as options in a task, or properties in a reference topic.</shortdesc>
<taskbody>
<context><p>Use the &lt;table> element for complex tables, which can include
spanned rows or columns, or a caption. Your editor will create this kind of
table by default when you use its table editor. For tables that are simple
grids of columns and rows, you can use the &lt;simpletable> element instead;
but you will need to create the markup directly.</p><p>If you have trouble
creating the tables, use the editor's built-in help for information on the
markup or editing tools.</p></context>
<steps>
<step><cmd>Create a complex table after the definition list, using your editor's
table function. Include at least one spanned row and column.</cmd><info>Please
see your editor's information for creating these kinds of tables.</info><stepresult>Here's
a typical table with a caption, description, and a spanned header:<table>
<title>The pros and cons of house pets</title><desc>What sort of house pet
would you like to adopt?</desc>
<tgroup cols="3"><colspec colnum="1" colname="col1"/><colspec colnum="2" colname="col2"/>
<colspec colnum="3" colname="COLSPEC0" colwidth="1*"/>
<thead>
<row>
<entry colname="col1" morerows="1">House pet</entry>
<entry namest="col2" nameend="COLSPEC0" valign="top" align="center">Traits</entry>
</row>
<row>
<entry colname="col2" valign="top">Good</entry>
<entry colname="COLSPEC0" valign="top">Bad</entry>
</row>
</thead>
<tbody>
<row>
<entry colname="col1">Cat</entry>
<entry colname="col2">Purr, sit on lap, clean up after themselves</entry>
<entry colname="COLSPEC0">Scratch, aloof, easy to startle (but that can be
fun)</entry>
</row>
<row>
<entry colname="col1">Dog</entry>
<entry colname="col2">Always happy to see you, playful</entry>
<entry colname="COLSPEC0">That stuff that needs picking up</entry>
</row>
<row>
<entry colname="col1">Fish</entry>
<entry colname="col2">Pretty, relaxing to watch</entry>
<entry colname="COLSPEC0">Tank needs cleaning (unless you also get a cleaning
fish!), cannot pet them, no cuddling</entry>
</row>
</tbody>
</tgroup>
</table><p>There is <b>lots</b> of coding here; we're not going
to include it here; these tables are created with <q>what you see is what
you get</q> editors.</p></stepresult></step>
<step><cmd>Create a simple table after the complex table, starting with the
&lt;simpletable> element. Include heading entries for the columns using the
&lt;sthead> element.</cmd><info>The table is defined by rows, which contain
entries. On output, the table will have as many columns as the number of entries
in the widest row.</info><stepxmp>Here's a sample simple table:<simpletable>
<sthead>
<stentry>Pets</stentry>
<stentry>Plus</stentry>
<stentry>Minus</stentry>
</sthead>
<strow>
<stentry>Cat</stentry>
<stentry>Purr</stentry>
<stentry>Scratch</stentry>
</strow>
<strow>
<stentry>Dog</stentry>
<stentry>Tailwagging</stentry>
<stentry>Do</stentry>
</strow>
</simpletable></stepxmp><stepresult>Here's its coding:<codeblock>&lt;simpletable>
 &lt;sthead>
  &lt;stentry>Pets&lt;/stentry>
  &lt;stentry>Plus&lt;/stentry>
  &lt;stentry>Minus&lt;/stentry>
 &lt;/sthead>
 &lt;strow>
  &lt;stentry>Cat&lt;/stentry>
  &lt;stentry>Purr&lt;/stentry>
  &lt;stentry>Scratch&lt;/stentry>
 &lt;/strow>
 &lt;strow>
  &lt;stentry>Dog&lt;/stentry>
  &lt;stentry>Tailwagging&lt;/stentry>
  &lt;stentry>Do&lt;/stentry>
 &lt;/strow>
&lt;/simpletable></codeblock></stepresult></step>
</steps>
</taskbody>
</task>
<task id="preview">
<title>Previewing PDF</title>
<shortdesc>Preview the topic in PDF to see how the markup formats for print.</shortdesc>
<taskbody></taskbody>
</task>
<task id="prevhtm">
<title>Previewing XHTML</title>
<shortdesc>Preview the topic in XHTML to see how it formats for online.</shortdesc>
<taskbody></taskbody>
</task>
<concept id="summary">
<title>Summary</title>
<shortdesc>You have created a simple topic, and seen how sections contain
blocks that contain phrases that contain keywords that contain text. Simply
put, big structures can contain smaller structures, but not vice versa.</shortdesc>
<conbody>
<p>You have also seen how the different kinds of markup can be divided up
into categories based on subject area, such as programming and user interfaces.</p>
<p>You are now ready to begin creating more specific information types, where
you will encounter additional kinds of markup and more restrictive rules on
how you author them.</p>
</conbody>
</concept>
</task>
</dita>
