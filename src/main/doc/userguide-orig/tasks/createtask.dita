<?xml version="1.0" encoding="utf-8"?>
<!-- (c) Copyright IBM Corp. 2004, 2006 All Rights Reserved. -->
<!DOCTYPE task PUBLIC "-//IBM//DTD DITA Task//EN"
 "..\dtd\task.dtd">
<task id="createtask" xml:lang="en-us">
<title>Creating task topics</title>
<shortdesc>Provide task topics that support user goals, rather than just describing
the user interface.</shortdesc>
<prolog><metadata>
<keywords><indexterm>tasks<indexterm>creating</indexterm></indexterm><indexterm>creating
tasks</indexterm></keywords>
</metadata></prolog>
<taskbody>
<prereq>Before you start writing tasks, you should have a task hierarchy derived
from user scenarios that defines how the task fits into larger user goals
and requirements.</prereq>
<context>Tasks are the most important part of your information set. Concepts
provide background and reference topics provide details, but tasks help users
with their actual goals. Make sure that you create and organize your task
hierarchy before you start documenting new tasks: knowing how a task fits
into the larger picture can help you determine the appropriate level of detail</context>
<steps>
<step><cmd>Open a new task document.</cmd></step>
<step><cmd>Provide a title for the task.</cmd><info>Task titles should start
with a verb, and use a plural object when that makes sense.</info><stepxmp>For
example use, "Printing files", or "Starting the server".</stepxmp></step>
<step><cmd>Provide an ID for the task.</cmd><info>The ID must start with a
letter and contain only letters and numbers.</info></step>
<step><cmd>Save the file and give it a name.</cmd><stepxmp>Tasks are often
stored in a \tasks subdirectory. Some conventions suggest starting the file
name with a "t" for task, to ensure that you don't end up with a concept and
task with the same filename in separate directories.</stepxmp></step>
<step><cmd>Provide a short description for the task.</cmd><info>This should
give a brief statement of the task's purpose, and will be used in overviews
of the task, links to the task, and as the first paragraph of the task itself.</info>
</step>
<step><cmd>Describe any prerequisites for the task.</cmd><info>If the prerequisites
have tasks associated with them, do not link to them here: add the links at
the end of the topic, or in a map, by setting importance="required" on the
related task.</info></step>
<step><cmd>Give some context for the task.</cmd><info>If the short description
provides enough information, you can omit the context. If you have a lot of
information to provide, chunk it out into a background concept and link to
it, rather than overwriting the task.</info></step>
<step><cmd>List the steps for the task.</cmd><info>Each step has a &lt;cmd>
element, which is typically a single-sentence instruction for the user. Give
minimalist instructions, rather than over-detailed lists of clicks. If your
audience is experienced computer users, it's alright to say "Save and close
the document" instead of listing each step involved.</info><info><p>Any additional
information for the step should go in one of the other step elements, such
as &lt;info>, &lt;stepxmp>, or &lt;stepresult>. Use &lt;substeps> sparingly,
since they can make a task harder to follow. If the user has a choice to make,
use the &lt;choices> or &lt;choicetable> elements to describe their options.</p></info>
</step>
<step><cmd>After the steps, describe the result of the task.</cmd><info>This
should be something the user can use to verify that they have completed the
task successfully.</info><stepxmp>For example, <codeph>&lt;result>You should
receive a confirmation message once the widget is successfully registered.&lt;/result></codeph></stepxmp>
</step>
<step><cmd>Provide an example.</cmd><info>Use the &lt;title> element to give
the example a title. If the example is large (more than just a screen capture
or some option settings), consider creating a separate example topic and linking
to it.</info></step>
<step><cmd>As the last part of a task, you can describe anything
the user should do next or after the task.</cmd><stepxmp>For example, <codeph>&lt;postreq>You
should test the widget's registration with the WidgetTester application.&lt;/postreq></codeph></stepxmp>
</step>
<step><cmd>Save the task, and make sure references to the task in maps use
the appropriate path and file name.</cmd></step>
</steps>
<result>You now have a task that can be included in maps and built into help
sets, Web sites, and PDFs.</result>
</taskbody>
</task>
