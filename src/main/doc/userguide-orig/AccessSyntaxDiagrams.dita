<?xml version="1.0" encoding="utf-8"?>
<!-- (c) Copyright IBM Corp. 2004, 2006 All Rights Reserved. -->
<!DOCTYPE reference PUBLIC "-//IBM//DTD DITA Reference//EN"
 "..\dtd\reference.dtd">
<reference id="AccessSyntaxDiagrams" xml:lang="en-us">
<title>Accessibility: Syntax Diagrams</title>
<shortdesc>This describes techniques and implementation tips to meet IBM Web
Accessibility for syntax diagrams.</shortdesc>
<prolog><metadata>
<keywords><indexterm>Accessibility<indexterm>Syntax Diagrams</indexterm></indexterm>
<indexterm>Syntax Diagrams<indexterm>Accessibility</indexterm></indexterm>
</keywords>
</metadata></prolog>
<refbody>
<section><p>Syntax diagrams are diagrams that display how to enter a particular
command on the command line and are commonly used in DB2 Universal Database
reference information. Typically, syntax diagrams are set up as railroad diagrams.
These diagrams are read from left to right and top to bottom, following the
path of the horizontal line. Required items appear on the horizontal line,
optional items appear below the horizontal line. If you can choose from two
or more items, they appear in a stack. There is more to reading railroad-style
syntax diagrams, but this abbreviated description provides enough information
to get started. </p><p>Syntax diagrams can also be set up as dotted decimal
diagrams. This form of syntax diagrams is accessible and it is the format
produced through the ID Workbench.</p><p><b>Source:</b>  <cite>Business Partner's
Guide to Writing Documentation</cite></p><p>To optimize syntax diagrams, introduce
each instance in the text that surrounds or introduces the diagram.</p><p>The
railroad syntax diagram is always created. When the syntax diagrams are transformed,
the transform process generates a dotted decimal syntax diagram in a separate
HTML file and adds two links before the syntax diagram. The screen reader
reads the alt text of the first link, which allows the visually impaired reader
to select the link. Once this link is selected, the screen reader program
can read the dotted decimal syntax diagram. The sighted user does not encounter
this link. The visually impaired user can then navigate back to the main HTML
file and, using the second link, skip over the railroad syntax diagram. This
implementation is available only for the XHTML transform.</p><p outputclass="c1">Hints
and Tips for Sensible, Accessible Syntax Diagrams</p><p> <b>Source:</b>  <cite>SVL
Accessibility database &gt; Accessibility Info-ID &gt; Resources</cite></p><p>Use
these suggestions to produce syntax diagrams that work well and are accessible
after they have gone through the IDWB accessibility transform.</p><ul>
<li>Think of the syntax diagram as a series of groups that are in between
the &lt;syntax&gt; and &lt;/syntax&gt; tags. Don't try to cram all the individual
elements into one group. By using the series-of-groups concept, the formatter
will be free to flow the diagram appropriately without scaling it down in
size.</li>
<li>Keep the maximum size for a syntax diagram down to what would fit nicely
into a single page in a browser, which might equate to a diagram that fits
on 1/2 of a printed 8.5 x 11 page.</li>
<li>Try to avoid making sequential or optional groups too large. This will
cause the syntax diagram to be displayed in a very small font. If necessary,
use fragments to break it into smaller groups.</li>
<li>Think of the elements within a group as being in a sequential series.
For example, a sequential series of keywords, variables, operators, other
groups and all other valid syntax elements.</li>
<li>Code each item in the syntax diagram appropriately. Don't put a bunch
of stuff within one tag. For example, if a variable has single quotes around
it, don't put the single quotes in the &lt;var&gt; tag. Use &lt;delim&gt;
tags on either side of the &lt;var&gt; for the single quotes.</li>
<li>If a comma separates keywords, code the comma as a separator (&lt;sep&gt;),
not as an operator (&lt;oper&gt;).</li>
<li>Equal signs (=) are operators (&lt;oper&gt;).</li>
<li>Characters that signify the border around keywords or variables (like
single quotes and parenthesis) are delimiters. They 'delimit' the boundaries,
so code them as delimiters (&lt;delim&gt;) and not something else like separators
or operators.</li>
<li>Minimize the use of nested groups.</li>
<li>If a group needs to be a composite group (all the items smushed up next
to each other with no spaces), put the 'composite' attribute on the group
that's closest to the items that need it.</li>
</ul></section>
</refbody>
</reference>
